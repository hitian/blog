[{"content":"arch linux install note\nPre-installation verify image signature\ngpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig\nBoot Option before boot up, update BIOS Boot Options to EFI\nInstall partition disk list disks fdisk -l\nuse fdisk to modify disk partition tables\nfdisk /dev/sda\nexample:\n500 MiB for EFI system partition 2048 MiB for Linux swap remainder for Linux root partition step:\ng # create a new empty GPT partition table n # create 1st partition 1 # default[1] first partition # default[2048] first sector +500M # first partition size n # create 2nd partition 2 # default[2] # default first sector +2048M # 2nd partition size n # create root partition # default[3] # default first sector # default size t # change partition type 1 # first partition 1 # partition type or alias, type 1: EFI System t # change partition type 2 # 2nd partition 19 # partition type or alias, type 19:Linux swap w # save check partition\nfdisk -l\nformat partition first partition EFI system partition to FAT32 mkfs.fat -F 32 /dev/sda1\n2nd partition swap to swap mkswap /dev/sda2\n3rd partition root to ext4 mkfs.ext4 /dev/sda3\nMount disk # mount root partition to /mnt mount /dev/sda3 /mnt # mount EFI partition to /mnt/boot mount --mkdir /dev/sda1 /mnt/boot #create swap swapon /dev/sda2 Install change download mirrors for Mainland China user edit /etc/pacman.d/mirrorlist\nadd\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch to the top of Server list\nupdate cache\npacman -Syy\ninstall linux base pacstrap /mnt base linux linux-firmware\nConfigure # generate fstab genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab # chroot arch-chroot /mnt # set timezone ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # install package pacman -S nano netctl dhcpcd # Localization echo \u0026#34;en_US.UTF-8 UTF-8\u0026#34; | tee -a /etc/locale.gen locale-gen echo \u0026#34;LANG=en_US.UTF-8\u0026#34; \u0026gt; /etc/locale.conf # hostname echo \u0026#34;archlinux\u0026#34; \u0026gt; /etc/hostname # set root\u0026#39;s password passwd Boot loader # install package grub and efibootmgr pacman -S grub efibootmgr mkdir /boot/grub grub-mkconfig \u0026gt; /boot/grub/grub.cfg # install grub grub-install --efi-directory=/boot --target=x86_64-efi /dev/sda # reboot to archlinux reboot setup network Static IP Address using netctl check network devices ip link\n1: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 2: ens33: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 link/ether 00:0c:29:19:2b:bf brd ff:ff:ff:ff:ff:ff altname enp2s1 network device name is ens33\nconfigure copy example file to etc\ncp /etc/netctl/examples/ethernet-static /etc/netctl/ens33\nedit /etc/netctl/ens33\nDescription=\u0026#39;A basic static ethernet connection\u0026#39; Interface=eth0 Connection=ethernet IP=static Address=(\u0026#39;192.168.1.23/24\u0026#39; \u0026#39;192.168.1.87/24\u0026#39;) #Routes=(\u0026#39;192.168.0.0/24 via 192.168.1.2\u0026#39;) Gateway=\u0026#39;192.168.1.1\u0026#39; DNS=(\u0026#39;192.168.1.1\u0026#39;) ## For IPv6 autoconfiguration #IP6=stateless ## For IPv6 static address configuration #IP6=static #Address6=(\u0026#39;1234:5678:9abc:def::1/64\u0026#39; \u0026#39;1234:3456::123/96\u0026#39;) #Routes6=(\u0026#39;abcd::1234\u0026#39;) #Gateway6=\u0026#39;1234:0:123::abcd\u0026#39; stop dhcp client\nsystemctl disable --now dhcpcd\nsetup auto start\nnetctl enable ens33\nstart\nnetctl start ens33\nDynamic IP Address copy example configure file\ncp /etc/netctl/examples/ethernet-dhcp /etc/netctl/enp2s1\nDescription=\u0026#39;A basic dhcp ethernet connection\u0026#39; Interface=enp2s1 Connection=ethernet IP=dhcp #DHCPClient=dhcpcd #DHCPReleaseOnStop=no ## for DHCPv6 #IP6=dhcp #DHCP6Client=dhclient ## for IPv6 autoconfiguration #IP6=stateless enable and start dhcp client\nsystemctl enable --now dhcpcd\nPost-install add user useradd --create-home tian add user to sudoers usermod -aG wheel tian # usermod --append --groups wheel tian update sudoers file\npacman -S sudo visudo uncomment the following line\n%wheel ALL=(ALL) ALL\nremove from sudoers\ngpasswd -d tian wheel other package for manage pacman -S net-tools dnsutils ","date":"2022-08-13T13:44:43+08:00","permalink":"https://hitian.info/post/arch-linux-install/","title":"arch linux install note"},{"content":"让 ubuntu 20.04 支持 Microsoft Remote Desktop 远程桌面连接\n安装依赖 这里安装了桌面 xfce4 , 个人感觉ubuntu自带的GNOME 3并不是很方便远程桌面使用😶\nsudo apt install xrdp xorg xfce4 xfce4-goodies dbus-x11 x11-xserver-utils xfce4-terminal 设置服务和配置 将桌面更改为 xfce, 编辑文件 /etc/xrdp/startwm.sh\n# 将这两行注释 #test -x /etc/X11/Xsession \u0026amp;\u0026amp; exec /etc/X11/Xsession #exec /bin/sh /etc/X11/Xsession # 新增 exec startxfce4 设置xsession\necho xfce4-session \u0026gt; ~/.xsession 设置 xrdp 自启动并重启 sudo systemctl enable --now xrdp sudo systemctl restart xrdp 安装注意 xrdp 默认开放 3389/TCP 到所有的网卡, 如果要跨公网使用, 最好使用ufw限制一下可以连接的ip段, 另外修改默认的端口也能减少被试探的概率\n","date":"2021-09-12T14:15:39+08:00","permalink":"https://hitian.info/post/setup-ubuntu-for-microsoft-remote-desktop/","title":"Setup Ubuntu for Microsoft Remote Desktop"},{"content":"Alias alias show_tcp_port=\u0026#34;lsof -nP -iTCP\u0026#34; alias show_tcp_port_listen=\u0026#34;lsof -nP -iTCP | grep LISTEN\u0026#34; disable .DS_Store on network storage defaults write com.apple.desktopservices DSDontWriteNetworkStores true disable gatekepper for binary exec e.g. perforce command p4\ntian@mac-mini ~ % xattr -p com.apple.quarantine `which p4` 0082;5fb2322c;Safari; tian@mac-mini ~ % xattr -d com.apple.quarantine `which p4` xattr: [Errno 13] Permission denied: \u0026#39;/usr/local/bin/p4\u0026#39; tian@mac-mini ~ % sudo xattr -d com.apple.quarantine `which p4` Password: tian@mac-mini ~ % xattr -p com.apple.quarantine `which p4` xattr: /usr/local/bin/p4: No such xattr: com.apple.quarantine tian@mac-mini ~ % create macOS install usb disk sudo /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/UDISK --applicationpath /Applications/Install\\ macOS\\ Big\\ Sur.app ","date":"2021-09-10T14:03:48+08:00","permalink":"https://hitian.info/post/macos-developer-tips/","title":"macOS tips for developer"},{"content":"针对Firefox for macOS 79.0 (64-bit)\n如果macOS有多块屏幕， 在默认配置下 firefox 全屏时会隐藏所有屏幕的菜单栏，需要手动改配置修复。\n地址栏输入并打开 about:config 忽略风险提示并搜索 full-screen-api 双击 full-screen-api.macos-native-full-screen 将配置更改为 true ","date":"2020-08-01T00:00:00Z","permalink":"https://hitian.info/post/fix-firefox-macos-full-sceen/","title":"修复macOS上的Firefox在全屏时会隐藏所有屏幕菜单栏的问题"},{"content":"Raspberry Pi 笔记 B系列硬件参数 Version CPU Arch RAM USB Boot from USB Ethernet Wireless Release 1 B BCM2835 700MHz 32-bit ARM1176JZFS 256/512MB USB2 * 2 No 10/100 Mbit/s - 2012 Apr~Jun 1 B+ BCM2835 700MHz 32-bit ARM1176JZFS 256/512MB USB2 * 4 No 10/100 Mbit/s - 2014 Jul 2 B v1.1 BCM2836 900MHz 32-bit quad-core ARM Cortex-A7 1GB USB2 * 4 No 10/100 Mbit/s - 2015 Feb 2 B v1.2 BCM2837 900MHz ~ 1.2GHz 64-bit quad-core ARM Cortex-A53 1GB USB2 * 4 Yes 10/100 Mbit/s - 2016 Oct 3 B BCM2837 1.2GHz 64-bit quad-core ARM Cortex-A53 1GB USB2 * 4 Yes 10/100 Mbit/s 2.4G WIFI + Bluetooth 4.1 2016 Feb 3 B+ BCM2837B0 1.4GHz 64-bit quad-core ARM Cortex-A53 1GB USB2 * 4 Yes 10/100/300 Mbit/s 2.4/5G WIFI + Bluetooth 4.2 LS 2018 Mar 4 B BCM2711 1.5GHz 64-bit quad-core ARM Cortex-A72 1/2/4/8GB USB2 * 2 + USB3 * 2 Yes 10/100/1000 Mbit/s 2.4/5G WIFI + Bluetooth 5.0 2019 Jun 常用的系统 官方raspbian 系统 https://www.raspberrypi.org/downloads/raspbian/\n可用于所有型号的raspberrypi\n优点\n基于debian，使用 apt 包管理工具， 经常使用 Ubuntu 的话， 还是比较顺手的 包含 raspi-config (Raspberry Pi Software Configuration Tool), 方便调整参数 缺点\n目前只有 32-bit 的系统(armhf) 1、2代推荐使用\nUbuntu MATE https://ubuntu-mate.org/raspberry-pi/\nModel B 2, 3 or 3+ 适用\n优点\n基于 Ubuntu，使用 apt 包管理工具 使用 Ubuntu meta 的桌面，干净，个人偏好 缺点\n同样只有 32-bit 的系统(armhf) 推荐需要干净桌面+浏览器的用户使用\nOSMC 这是一个 Kodi 的发行版本，用树莓派将家里的电视变成媒体中心，播放内网下载好的视频，或者安装插件直接播放网络视频\nhttps://osmc.tv/download/\n可用于所有型号的raspberrypi， 友情提示， 最好在有有线网络接口(USB网卡也可以)的pi上使用， 使用2.4G Wi-Fi播放高清视频绝对会卡的\nUbuntu Server 作为服务器使用推荐\nUbuntu 20.04 LTS (Focal Fossa) http://cdimage.ubuntu.com/releases/20.04/release/\nRaspberry Pi Generic (Hard-Float) preinstalled server image\nFor 32-bit\nRaspberry Pi Generic (64-bit ARM) preinstalled server image\nFor 64-bit\n系统镜像文件写入SD/TF卡 简单模式 推荐新手使用Etcher https://github.com/balena-io/etcher/releases\nWindows, linux, macOS 可用\n命令行模式 sudo dd if=2019-07-10-raspbian-buster-full.img of=/dev/rdisk2 bs=1m\nlinux, macOS 可用，不同系统上目标磁盘的格式可能不太一样，macOS 注意 /dev/disk2 和 /dev/rdisk2 的区别，rdisk写入速度会快10倍以上\n注意，dd会覆盖磁盘上的数据，谨慎操作。\n使用USB硬盘启动 参考官方说明 https://www.raspberrypi.org/documentation/hardware/raspberrypi/bootmodes/msd.md\n简单的说就是 3 B+ 及以上硬件版本可以直接从USB设备启动\n之前的硬件版本需要手动更改启动模式\n常用命令 系统配置 (官方raspbian 系统可用) sudo raspi-config\n查看树莓派的型号 cat /proc/device-tree/model\n查看有线网络当前的链接速度 单位mb cat /sys/class/net/eth0/speed\n查看当前核心温度 (除1000为摄氏度) cat /sys/class/thermal/thermal_zone0/temp\n","date":"2019-08-25T00:00:00Z","permalink":"https://hitian.info/post/raspberry-pi-note/","title":"Raspberry Pi note"},{"content":"在docker中编译openwrt build docker image Docker file\n{% gist 88ff8a7cad5deffad51d8c29d5c47d75 Dockerfile %}\ndocker build --no-cache -t ubuntu-openwrt-build .\nbuild clone openwrt source code\ngit clone https://git.openwrt.org/openwrt/openwrt.git\n# 更新软件包 docker run -it --rm -v $PWD:/build ubuntu-openwrt-build ./scripts/feeds update -a # 使用 menuconfig 设置编译目标、内核信息、以及需要安装的包 docker run -it --rm -v $PWD:/build ubuntu-openwrt-build make menuconfig # 编译 docker run -it --rm -v $PWD:/build ubuntu-openwrt-build make -j4 生成的文件会放置在bin目录下, 例如 MT7621 放在 bin/targets/ramips/mt7621\n#配置文件，同运行 make menuconfig 后生成的.config 文件，可以用于备份和还原配置 config.seed openwrt-ramips-mt7621-device-pbr-m1-t.manifest openwrt-ramips-mt7621-pbr-m1-t-initramfs-kernel.bin #首次刷机使用 openwrt-ramips-mt7621-pbr-m1-t-squashfs-sysupgrade.bin #更新使用 packages #编译好的设置为编译但是不安装的包 添加新设备 示例 https://github.com/hitian/openwrt/commit/22df459310836b92caa8fb1796885f670214d25a#diff-8dabb1882176c362bafecc664a7af2ee\n","date":"2019-08-10T00:00:00Z","permalink":"https://hitian.info/post/openwrt-build-docker/","title":"在docker中编译openwrt"},{"content":"配置ssh客户端的行为 配置文件路径 ~/.ssh/config\n针对目标主机的配置块示例\nHost deploy-gw HostName [__target_hostname_or_ip__] User game IdentityFile ~/.ssh/deploy_private_key ProxyCommand [__connect_command__] 配置解释 除了Host之外， 其它的都是可选的 Host deploy-gw 定义使用时的名字，之后使用 ssh deploy-gw 登录目标，这个只是别名，当然这里也可以直接写hostname 或者IP地址; 当使用 Hostname 时可以进行匹配， 例如 Host *.hitian.info 可以匹配到 a.hitian.info.\nHostName [__target_hostname_or_ip__] 目标的主机名或者IP地址\nUser tian 用户名\nIdentityFile ~/.ssh/deploy_private_key 指定使用的private key路径。 替代ssh的 -i 参数一样效果\nProxyCommand ssh -q [__local_gw__] nc [__target_addr__] 22 连接目标主机时使用的命令\nssh via [http or socks proxy] 使用场景: 由于不可抗拒的因素无法直接ssh 到远程主机，或者链接过程中会被异常阻断时\n这里我们需要一个 connect 命令，需要自行安装一下。\nProvides SOCKS and HTTPS proxy support to SSH https://bitbucket.org/gotoh/connect/wiki/Home macOS 可以利用brew 直接安装, 其它平台可以按说明执行编译安装\nbrew install connect 要让ssh使用proxy连接到目标主机，在config 中添加ProxyCommand配置\n使用 http 代理\nProxyCommand connect -H http_proxy_addr:port %h %p\n使用 socks 代理\nProxyCommand connect -S socks_proxy_addr:port %h %p\n详细的connect使用说明可以参照官方wiki\nssh via ssh 使用场景：\n例如需要通过某台ssh的网关才能链接到内网的其它ssh服务器\n当然可以通过先ssh到网关，再ssh到目标主机的方式简单实现，但是这要求在网关机器上放一份目标主机的私钥。\n如果不想将私钥给网关机器。可以采用以下方式\n使用 nc 命令实现转发， nc在macOS和主流Linux上已经内置\n在config 中添加ProxyCommand配置\nProxyCommand ssh -q gateway_host nc target_host 22\n这里 gateway_host 为网关， nc 后为目标的主机和sshd的端口号， 首先要保证可以正常ssh 到gateway_host。\n这种方式可以直接实现更长的转发链\n例如要直接在local登录target 只需要在本地分别为a, b, target 配置ProxyCommand就可以了，妈妈再也不需要担心我要一层一层ssh到远程机器了:)\nlocal -\u0026gt; gateway -\u0026gt; a -\u0026gt; b -\u0026gt; target socks proxy over ssh 使用场景：需要访问目标主机的localhost，或者目标主机内网的资源时， 如果客户端无法使用socks链接需要的资源，请参考下一种方式\n在本地监听1089端口。将请求通过ssh隧道转发到target_host\nssh -D 1089 target_host port forward via ssh 使用场景： 直接在本地请求目标主机内网的服务时\n举个例子\ngateway 服务器的内网有一台mysql服务器运行在 10.0.0.3:3306， 本地的mysql客户端无法直接链接。 我们可以采用ssh来映射端口到本地\nssh -L localhost:3306:10.0.0.3:3306 target_host L参数的格式 本地地址:本地监听端口:远程地址:要映射的远程端口\n上面的命令可以直接将远程mysql服务器的3306端口映射到本地的3306端口， 在本地可以直接使用mysql -h localhost连接。\n当然也可以使用0.0.0.0，将本地的端口开放给本地的其它主机使用\nssh -L 0.0.0.0:3306:10.0.0.3:3306 target_host 不稳定的网络中使用ssh 由于ssh使用的TCP链接，在不稳定的网络中使用ssh会很容易断开，推荐使用 mosh https://mosh.org/\nmosh 会使用 Protocol Buffers + UDP 的方式传输ssh数据，包含数据的压缩和断线重连，原有的ssh配置和权限都不需要额外的变更\n注意：mosh客户端在启动的时候会ssh到远程的主机，启动一个mosh-server 并默认监听在一个60000-61000之间的UDP端口。而且每开启一个新的客户端， 都会在服务器上开一个新的udp端口，需要防火墙放心对应的UDP端口段.\niOS上的客户端推荐 https://github.com/blinksh/blink\nTHE END\n","date":"2019-01-05T00:00:00Z","permalink":"https://hitian.info/post/ssh-proxy-forward/","title":"ssh 代理和转发那些事"},{"content":"新年快乐！ 🎊🎉\n","date":"2019-01-01T00:00:00Z","permalink":"https://hitian.info/post/happy-new-year/","title":"新年快乐"},{"content":"Check the latest version Vmware Official https://my.vmware.com/group/vmware/patch#search\nor\nVMware ESXi Patch Tracker https://esxi-patches.v-front.de/ESXi-6.7.0.html\nInstall # From https://esxi-patches.v-front.de/ESXi-6.7.0.html # Cut and paste these commands into an ESXi shell to update your host with this Imageprofile # See the Help page for more instructions # esxcli network firewall ruleset set -e true -r httpClient esxcli software profile update -p ESXi-6.7.0-20181104001-standard \\ -d https://hostupdate.vmware.com/software/VUM/PRODUCTION/main/vmw-depot-index.xml esxcli network firewall ruleset set -e false -r httpClient # # Reboot to complete the upgrade IF Errno 28 No space left on device!!! download the offline update zip file here. https://my.vmware.com/group/vmware/patch#search\nupload to Datastores via webUI Install esxcli software profile update -p ESXi-6.7.0-20181104001-standard \\ -d update_zip_file_path ","date":"2018-12-30T00:00:00Z","permalink":"https://hitian.info/post/vmware-esxi-upgrade/","title":"vmware esxi install update patch"},{"content":"esxi 的证书管理页面貌似有bug一直无法更新证书，这里直接ssh登陆服务器替换\n开启SSH\nLet\u0026rsquo;s Encrypt 签发的证书目录如下\nhitian :: ~ » ls -al .acme.sh/hitian.me/ total 36 drwxr-xr-x 2 tian tian 4096 Mar 20 14:59 . drwx------ 8 tian tian 4096 May 27 15:41 .. -rw-r--r-- 1 tian tian 1648 May 19 00:26 ca.cer -rw-r--r-- 1 tian tian 3803 May 19 00:26 fullchain.cer -rw-r--r-- 1 tian tian 2155 May 19 00:26 hitian.me.cer -rw-r--r-- 1 tian tian 529 May 19 00:26 hitian.me.conf -rw-r--r-- 1 tian tian 980 May 19 00:24 hitian.me.csr -rw-r--r-- 1 tian tian 220 May 19 00:24 hitian.me.csr.conf -rw-r--r-- 1 tian tian 1675 Mar 20 14:55 hitian.me.key exsi 的配置目录如下\n[root@localhost:/etc/vmware/ssl] ls -al total 36 drwxr-xr-x 1 root root 512 Jun 3 18:34 . -r--r--r-T 1 root root 0 Apr 3 21:24 .#castore.pem -r-------T 1 root root 0 Apr 3 21:24 .#rui.bak -r--r--r-T 1 root root 0 Apr 3 21:24 .#rui.crt -r-------T 1 root root 0 Apr 3 21:24 .#rui.key drwxr-xr-x 1 root root 512 Jul 12 00:28 .. -rw-r--r-- 1 root root 1050 Jun 3 18:34 castore.pem -rw-r--r-- 1 root root 3859 Jun 3 18:34 iofiltervp.pem -r--r--r-- 1 root root 229 Apr 3 21:24 openssl.cnf -r-------- 1 root root 5231 Jun 3 18:34 rui.bak -rw-r--r-- 1 root root 3803 Jul 12 00:26 rui.crt -rw------- 1 root root 1675 Jul 12 00:27 rui.key -rw-r--r-T 1 root root 0 Apr 3 21:50 vsan_kms_castore.pem -rw-r--r-T 1 root root 0 Apr 3 21:50 vsan_kms_castore_old.pem -rw-r--r-T 1 root root 0 Apr 3 21:50 vsan_kms_client.crt -rw-r--r-T 1 root root 0 Apr 3 21:50 vsan_kms_client.key -rw-r--r-T 1 root root 0 Apr 3 21:50 vsan_kms_client_old.crt -rw-r--r-T 1 root root 0 Apr 3 21:50 vsan_kms_client_old.key -rw-r--r-T 1 root root 0 Apr 3 21:50 vsanvp_castore.pem 使用 fullchain.cer 覆盖 rui.crt 使用 hitian.me.key 覆盖 rui.key 覆盖前先备份一下，防止发生意外\n接下来需要重启UI让配置生效\n/etc/init.d/hostd restart /etc/init.d/vpxa restart ","date":"2018-07-12T00:00:00Z","permalink":"https://hitian.info/post/vmware-esxi-upgrade-ssl-certificate/","title":"更新vmware esxi ssl证书"},{"content":"准备Ubuntu Server 安装最新版本的 ubuntu server, 可以使用网易开源镜像站加速下载\nhttp://mirrors.163.com/ubuntu-releases/18.04/ubuntu-18.04-live-server-amd64.iso\n在3台主机上安装系统 物理机或者虚拟机都可以，要求互相之前可以直连，内存建议在2G以上， 如果不跑什么大型系统的话硬盘15G就差不多了\n这里直接在VMware Esxi 上启动3个实例安装系统并指定IP地址\n主机 IP hostname 说明 c-1 192.168.5.191 c1 Master c-2 192.168.5.192 c2 Node c-3 192.168.5.193 c3 Node 准备环境 下面的步骤需要在3台主机上全部执行, 注意使用root用户\n(可选) 更换apt的更新源为国内的地址，加速安装过程 sed -i -- 's/archive.ubuntu.com/mirrors.163.com/g' /etc/apt/sources.list\n更新 APT apt update -y \u0026amp;\u0026amp; apt upgrade -y\n安装 Docker CE 以下可以参照Docker 官网的文档 https://docs.docker.com/install/linux/docker-ce/ubuntu/\n# 安装依赖 apt-get install -y \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common # Add Docker’s official GPG key: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # 添加Docker 的 apt repository. add-apt-repository \\ \u0026#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\u0026#34; # 更新APT 并安装Docker apt-get update -y \u0026amp;\u0026amp; apt-get install -y docker-ce 安装 Kubernetes 相关的工具 # Add Google’s official GPG key: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - # 添加 APT repository. cat \u0026lt;\u0026lt;EOF \u0026gt;/etc/apt/sources.list.d/kubernetes.list deb http://apt.kubernetes.io/ kubernetes-xenial main EOF # 更新APT 并安装 apt-get update -y \u0026amp;\u0026amp; apt-get install -y kubelet kubeadm kubectl 到这里基础环境就准备好了， 下来开始初始化， 注意下面的部分在Master主机上操作\n初始化 Kubernetes 启动 Master (可选) 先pull一下初始化过程中需要的docker image， 加速安装过程 kubeadm config images pull\n初始化 kubeadm init --pod-network-cidr=10.244.0.0/16\npod-network-cidr参数是之后创建内部网络需要的ip段，选一个没有被占用的内网段就可以了\n如果报错 if [ERROR Swap]: running with swap on is not supported. Please disable swap\nswap 没有关闭， 使用swapoff -a命令关闭swap再重新运行init\n输出大概如下\nroot@c1:/home/tian# kubeadm init --pod-network-cidr=10.244.0.0/16 I0711 03:45:48.345918 2359 feature_gate.go:230] feature gates: \u0026amp;{map[]} [init] using Kubernetes version: v1.11.0 [preflight] running pre-flight checks I0711 03:45:48.367074 2359 kernel_validator.go:81] Validating kernel version I0711 03:45:48.367165 2359 kernel_validator.go:96] Validating kernel config [WARNING SystemVerification]: docker version is greater than the most recently validated version. Docker version: 18.03.1-ce. Max validated version: 17.03 [preflight/images] Pulling images required for setting up a Kubernetes cluster [preflight/images] This might take a minute or two, depending on the speed of your internet connection [preflight/images] You can also perform this action in beforehand using \u0026#39;kubeadm config images pull\u0026#39; [kubelet] Writing kubelet environment file with flags to file \u0026#34;/var/lib/kubelet/kubeadm-flags.env\u0026#34; [kubelet] Writing kubelet configuration to file \u0026#34;/var/lib/kubelet/config.yaml\u0026#34; [preflight] Activating the kubelet service [certificates] Generated ca certificate and key. [certificates] Generated apiserver certificate and key. [certificates] apiserver serving cert is signed for DNS names [c1 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.5.191] [certificates] Generated apiserver-kubelet-client certificate and key. [certificates] Generated sa key and public key. [certificates] Generated front-proxy-ca certificate and key. [certificates] Generated front-proxy-client certificate and key. [certificates] Generated etcd/ca certificate and key. [certificates] Generated etcd/server certificate and key. [certificates] etcd/server serving cert is signed for DNS names [c1 localhost] and IPs [127.0.0.1 ::1] [certificates] Generated etcd/peer certificate and key. [certificates] etcd/peer serving cert is signed for DNS names [c1 localhost] and IPs [192.168.5.191 127.0.0.1 ::1] [certificates] Generated etcd/healthcheck-client certificate and key. [certificates] Generated apiserver-etcd-client certificate and key. [certificates] valid certificates and keys now exist in \u0026#34;/etc/kubernetes/pki\u0026#34; [kubeconfig] Wrote KubeConfig file to disk: \u0026#34;/etc/kubernetes/admin.conf\u0026#34; [kubeconfig] Wrote KubeConfig file to disk: \u0026#34;/etc/kubernetes/kubelet.conf\u0026#34; [kubeconfig] Wrote KubeConfig file to disk: \u0026#34;/etc/kubernetes/controller-manager.conf\u0026#34; [kubeconfig] Wrote KubeConfig file to disk: \u0026#34;/etc/kubernetes/scheduler.conf\u0026#34; [controlplane] wrote Static Pod manifest for component kube-apiserver to \u0026#34;/etc/kubernetes/manifests/kube-apiserver.yaml\u0026#34; [controlplane] wrote Static Pod manifest for component kube-controller-manager to \u0026#34;/etc/kubernetes/manifests/kube-controller-manager.yaml\u0026#34; [controlplane] wrote Static Pod manifest for component kube-scheduler to \u0026#34;/etc/kubernetes/manifests/kube-scheduler.yaml\u0026#34; [etcd] Wrote Static Pod manifest for a local etcd instance to \u0026#34;/etc/kubernetes/manifests/etcd.yaml\u0026#34; [init] waiting for the kubelet to boot up the control plane as Static Pods from directory \u0026#34;/etc/kubernetes/manifests\u0026#34; [init] this might take a minute or longer if the control plane images have to be pulled [apiclient] All control plane components are healthy after 42.004178 seconds [uploadconfig] storing the configuration used in ConfigMap \u0026#34;kubeadm-config\u0026#34; in the \u0026#34;kube-system\u0026#34; Namespace [kubelet] Creating a ConfigMap \u0026#34;kubelet-config-1.11\u0026#34; in namespace kube-system with the configuration for the kubelets in the cluster [markmaster] Marking the node c1 as master by adding the label \u0026#34;node-role.kubernetes.io/master=\u0026#39;\u0026#39;\u0026#34; [markmaster] Marking the node c1 as master by adding the taints [node-role.kubernetes.io/master:NoSchedule] [patchnode] Uploading the CRI Socket information \u0026#34;/var/run/dockershim.sock\u0026#34; to the Node API object \u0026#34;c1\u0026#34; as an annotation [bootstraptoken] using token: pbl4c9.b0ws1tfhjt6ra66a [bootstraptoken] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials [bootstraptoken] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token [bootstraptoken] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster [bootstraptoken] creating the \u0026#34;cluster-info\u0026#34; ConfigMap in the \u0026#34;kube-public\u0026#34; namespace [addons] Applied essential addon: CoreDNS [addons] Applied essential addon: kube-proxy Your Kubernetes master has initialized successfully! To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config You should now deploy a pod network to the cluster. Run \u0026#34;kubectl apply -f [podnetwork].yaml\u0026#34; with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/ You can now join any number of machines by running the following on each node as root: kubeadm join 192.168.5.191:6443 --token xxxxxxxxxxx --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 配置信息拷贝到普通用户 上面有两部分是之后需要用到的。\n首先退出root用户，切换到普通用户执行这一段，目的是将生成的相关配置信息拷贝到普通用户目录下，之后直接使用普通用户操作集群\nmkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config 检查一下节点信息\nkubectl get nodes --all-namespaces\ntian@c1:~$ kubectl get nodes --all-namespaces NAME STATUS ROLES AGE VERSION c1 NotReady master 1m v1.11.0 因为网络还没有配置好， 状态还暂时是NotReady， 下来安装网络插件\n安装网络插件 选择一种网络插件， 参考官方文档https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#pod-network\n我们这里使用Flannel\n执行 (For Kubernetes v1.7+)\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n注意新版本的ubuntu 需要更改 /etc/sysctl.conf 添加 net.bridge.bridge-nf-call-iptables=1 开启桥接网络的流量转发\necho \u0026#39;net.bridge.bridge-nf-call-iptables=1\u0026#39; \u0026gt;\u0026gt; /etc/sysctl.conf sysctl -p 安装完成后使用kubectl get pods --all-namespaces看下情况， 因为要下载相关的docker镜像，可能需要一点时间，等到kube-flannel-XXXXXXX 这个变成Running 之后就完成了\ntian@c1:~$ kubectl get pods --all-namespaces NAMESPACE NAME READY STATUS RESTARTS AGE kube-system coredns-78fcdf6894-8tkzx 1/1 Running 0 2m kube-system coredns-78fcdf6894-cbdb8 1/1 Running 0 2m kube-system etcd-c1 1/1 Running 0 1m kube-system kube-apiserver-c1 1/1 Running 0 1m kube-system kube-controller-manager-c1 1/1 Running 0 2m kube-system kube-flannel-ds-pqpgk 1/1 Running 0 36s kube-system kube-proxy-kpjrk 1/1 Running 0 2m kube-system kube-scheduler-c1 1/1 Running 0 1m 到这里Master就配置好了，现在可以开始加入其它节点了\n初始化其它 Node 进入其它的所有主机切换到root用户， 执行之前Mater初始化最后输出的join命令段， 例如\nkubeadm join 192.168.5.191:6443 --token xxxxxxxxxxx --discovery-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n如果没有报错的话就完成了\n接下来回到Master主机\n使用kubectl get nodes查看节点的状态\ntian@c1:~$ kubectl get nodes NAME STATUS ROLES AGE VERSION c1 Ready master 10m v1.11.0 c2 NotReady \u0026lt;none\u0026gt; 1m v1.11.0 c3 NotReady \u0026lt;none\u0026gt; 14s v1.11.0 到这里就完成了，稍等初始化完成可以正常使用了。\n安装图形化管理界面 安装 kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.1/aio/deploy/recommended.yaml #开启proxy 方便内网访问 kubectl proxy --address=\u0026#39;0.0.0.0\u0026#39; #(可选)如果在机房内网需要经过gateway才能访问的话， 可以临时开启ssh转发，然后直接访问 TMac :: ~ » ssh -L localhost:8001:192.168.5.191:8001 gateway-server 管理地址\nhttp://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\n接下来要创建可以登陆管理界面的用户\n创建用户配置 create_account.yaml, 用户名为admin\napiVersion: v1 kind: ServiceAccount metadata: name: admin-user namespace: kubernetes-dashboard 应用配置kubectl create -f create_account.yaml\n创建权限配置 admin_account_role_binding.yaml\napiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: admin-user roleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount name: admin-user namespace: kubernetes-dashboard 应用配置kubectl create -f admin_account_role_binding.yaml\n好了， 接下来查看创建的用户token\nkubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}')\n使用输出的很长很长的token登陆\n销毁 注意，这里是销毁\n移除Node 在Mater 上执行\nkubectl drain \u0026lt;node name\u0026gt; --delete-local-data --force --ignore-daemonsets kubectl delete node \u0026lt;node name\u0026gt; 然后在对应的Node 上执行kubeadm reset\n删除Master 直接执行 kubeadm reset 就可以了\n全文完\n","date":"2018-07-12T00:00:00Z","permalink":"https://hitian.info/post/kubernetes-cluster-setup-on-ubuntu-server/","title":"在Ubuntu Server上搭建Kubernetes cluster"},{"content":"最新的ubuntu已经使用netplan来管理网络配置了\n列出当前的配置文件ls -al /etc/netplan/， 注意配置文件为yaml格式， 如果当前没有配置， 可以创建一个例如/etc/netplan/01-netcfg.yaml\n例子 配置为使用DHCP network: version: 2 renderer: networkd ethernets: ens33: dhcp4: yes dhcp6: yes 配置为静态ip network: version: 2 renderer: networkd ethernets: ens33: dhcp4: no dhcp6: no addresses: [192.168.1.2/24] gateway4: 192.168.1.1 nameservers: addresses: [8.8.8.8,8.8.4.4] 配置文件修改好之后使用sudo netplan apply应用配置， 可以加debug参数来查看具体的过程sudo netplan --debug apply\n","date":"2018-07-10T00:00:00Z","permalink":"https://hitian.info/post/ubuntu-server-set-network-netplan/","title":"使用netplan管理ubuntu 的网络配置"},{"content":"OmniFocus change language Reset omnifocus:///change-preference?AppleLanguages= 中文 omnifocus:///change-preference?AppleLanguages=zh Bear Create note bear://x-callback-url/create?title=Title\u0026amp;text=Text\u0026amp;tags=tag1,tag2 Open tag bear://x-callback-url/open-tag?name=tag-name Search note bear://x-callback-url/search?term=keyword Due Add due://x-callback-url/add?title=title ","date":"2018-07-09T00:00:00Z","permalink":"https://hitian.info/post/x-callback-links/","title":"常用的 x-callback 链接"},{"content":"docker host ip addr 192.168.5.170\ndocker run \\ -p 2379:2379 \\ -p 2380:2380 \\ --volume=/dir/for/etcd/data:/etcd-data \\ --name etcd --rm -d quay.io/coreos/etcd:latest \\ /usr/local/bin/etcd \\ --data-dir=/etcd-data --name node1 \\ --initial-advertise-peer-urls http://192.168.5.170:2380 \\ --listen-peer-urls http://0.0.0.0:2380 \\ --advertise-client-urls http://192.168.5.170:2379 \\ --listen-client-urls http://0.0.0.0:2379 \\ --initial-cluster node1=http://192.168.5.170:2380 with tls certificate.\ndocker run --name etcd -d -p 2379:2379 -p 2380:2380 \\ -v /home/tian/workspace/certs:/etcd-ssl-certs-dir \\ -v /home/tian/workspace/etcd:/etcd-data \\ quay.io/coreos/etcd:latest /usr/local/bin/etcd \\ --name my-name \\ --data-dir /etcd-data \\ --listen-client-urls \u0026#34;https://0.0.0.0:2379\u0026#34; \\ --advertise-client-urls \u0026#34;https://hostname:2379\u0026#34; \\ --listen-peer-urls \u0026#34;https://0.0.0.0:2380\u0026#34; \\ --initial-advertise-peer-urls \u0026#34;https://hostname:2380\u0026#34; \\ --initial-cluster \u0026#34;my-name=https://hostname:2380\u0026#34; \\ --initial-cluster-token \u0026#34;tkn\u0026#34; \\ --initial-cluster-state \u0026#34;new\u0026#34; \\ --client-cert-auth \\ --trusted-ca-file \u0026#34;/etcd-ssl-certs-dir/ca.pem\u0026#34; \\ --cert-file \u0026#34;/etcd-ssl-certs-dir/server.pem\u0026#34; \\ --key-file \u0026#34;/etcd-ssl-certs-dir/server-key.pem\u0026#34; \\ --peer-client-cert-auth \\ --peer-trusted-ca-file \u0026#34;/etcd-ssl-certs-dir/ca.pem\u0026#34; \\ --peer-cert-file \u0026#34;/etcd-ssl-certs-dir/server.pem\u0026#34; \\ --peer-key-file \u0026#34;/etcd-ssl-certs-dir/server-key.pem\u0026#34; check\ndocker exec -it etcd etcdctl member list test with golang\n{% gist 211bd79f3ce5a6e1fde607086a75c46b %}\ncreate golang client with certificate.\n//load client certificate. cert, err := tls.LoadX509KeyPair(\u0026#34;./client.pem\u0026#34;, \u0026#34;./client-key.pem\u0026#34;) if err != nil { panic(err) } //load ca certificate. rootCAPem, err := ioutil.ReadFile(\u0026#34;ca.pem\u0026#34;) if err != nil { panic(err) } caPool := x509.NewCertPool() ok := caPool.AppendCertsFromPEM(rootCAPem) if !ok { panic(\u0026#34;append ca cert failed.\u0026#34;) } cfg := client.Config{ Endpoints: []string{\u0026#34;https://hostname:2379\u0026#34;}, Transport: \u0026amp;http.Transport{ TLSClientConfig: \u0026amp;tls.Config{ Certificates: []tls.Certificate{cert}, RootCAs: caPool, }, }, HeaderTimeoutPerRequest: time.Second, } ","date":"2018-07-08T00:00:00Z","permalink":"https://hitian.info/post/docker-run-etcd/","title":"Deploying an etcd cluster as a standalone cluster on docker"},{"content":"*** 以下内容针对 VMware ESXi 6.5.0 build-6765664 ***\n意外删除了esxi 的一个vmfs所在的磁盘，导致vm列表下一直会显示一个invalid状态的VM， 无法进行任何操作，看着非常碍眼。显然通过web界面可能无法处理这个问题了\n开启SSH服务，登录esxi。\n[root@localhost:/vmfs] vim-cmd vmsvc/getallvms Skipping invalid VM \u0026#39;6\u0026#39; Vmid Name File Guest OS Version Annotation 1 ubuntu-desktop [HDD] ubuntu-desktop/ubuntu-desktop.vmx ubuntu64Guest vmx-13 11 ubuntu-server-1710 [HDD] ubuntu-server-1710/ubuntu-server-1710.vmx ubuntu64Guest vmx-13 2 ubuntu-server [HDD] ubuntu-server/ubuntu-server.vmx ubuntu64Guest vmx-13 3 windows-7 [HDD] windows-7/windows-7.vmx windows7_64Guest vmx-13 使用 vim-cmd vmsvc/getallvms 命令可以看到提示出现问题的是 VM 6， 接下来直接删除就好了。\n[root@localhost:/vmfs] vim-cmd vmsvc/unregister 6 刷新web界面， 就可以看到出错的vm已经被删除了。\n","date":"2017-11-05T00:00:00Z","permalink":"https://hitian.info/post/esxi-unregister-invalid-vm/","title":"vmware esxi unregister invalid vm"},{"content":"安装 acme.sh curl https://get.acme.sh | sh 参考 https://github.com/Neilpang/acme.sh\n安装完成之后可执行文件位于 ~/.acme.sh/acme.sh\n生成 dnspod 的API Token 地址 https://www.dnspod.cn/console/user/security\n用户中心 \u0026gt; 安全设置 \u0026gt; API Token \u0026gt; 创建 API Token\n注意，Token 只显示一次， 保存下来， 如果忘记了， 就只能删除然后重新生成了。\n还需需要记录下 API Token 的 ID\n开始签发证书 参考 https://github.com/Neilpang/acme.sh/tree/master/dnsapi\n首先设置环境变量\nexport DP_Id=\u0026#34;API Token 的 ID\u0026#34; export DP_Key=\u0026#34;API Token\u0026#34; 然后可以开始签发了\nacme.sh --issue --dns dns_dp -d example.com -d www.example.com 每个 -d 参数可以指定一个域名， 可以把需要用到的子域名也全部列出来\n自动运行的流程大概是这样的\n使用dnspod的api 自动生成所有的验证域名txt记录 _acme-challenge.example.com， 每个子域名也会有_acme-challenge.www.example.com 等待dns记录生效，自动脚本会sleep 120 秒 检查验证的dns记录， 没有问题的话签发证书保存到本地， 再次调用api 移除验证的域名 创建crontab 自动更新相关证书。 生成好的证书位于 ~/.acme.sh/www.example.com 目录下, 至此证书就签发好了。\n另外自动创建的 crontab\n24 0 * * * \u0026quot;/home/tian/.acme.sh\u0026quot;/acme.sh --cron --home \u0026quot;/home/tian/.acme.sh\u0026quot; \u0026gt; /dev/null\n应该会每天运行一次， 在证书过期前自动更新。\n","date":"2017-02-16T00:00:00Z","permalink":"https://hitian.info/post/acme-sh-create-letsencrypt-certificates-with-dns-api/","title":"使用ACME Shell script和dnspod的api自动生成Let's Encrypt证书"},{"content":"首先需要更新到4.9以上的内核版本， ubuntu和debian可以参考 这里\n重启确认内核版本升级完成继续\n以root用户执行以下命令\necho \u0026#34;net.core.default_qdisc=fq\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf echo \u0026#34;net.ipv4.tcp_congestion_control=bbr\u0026#34; \u0026gt;\u0026gt; /etc/sysctl.conf sysctl -p 检查是否修改成功\nsysctl net.ipv4.tcp_available_congestion_control #结果如下， 包含bbr #net.ipv4.tcp_available_congestion_control = bbr cubic reno lsmod | grep bbr #结果如下， 包含 tcp_bbr #tcp_bbr 20480 40 ","date":"2017-02-07T00:00:00Z","permalink":"https://hitian.info/post/ubuntu-server-install-bbr/","title":"Ubuntu Server Install BBR"},{"content":"下载最新的内核 http://kernel.ubuntu.com/~kernel-ppa/mainline/?C=N;O=D\n进入最新的版本目录\n需要下载4个文件\nlinux-headers-XXXXX_XXXXX_all.deb linux-headers-XXXXX-generic_XXXXX_PLATFORM.deb linux-image-unsigned-XXXXX-generic_XXXXX_PLATFORM.deb linux-modules-XXXXX-generic_XXXXX_PLATFORM.deb 例如目前最新的是v4.17.5 (2018-07-09), 下载这4个文件\nlinux-headers-4.17.5-041705_4.17.5-041705.201807081431_all.deb linux-headers-4.17.5-041705-generic_4.17.5-041705.201807081431_amd64.deb linux-image-unsigned-4.17.5-041705-generic_4.17.5-041705.201807081431_amd64.deb linux-modules-4.17.5-041705-generic_4.17.5-041705.201807081431_amd64.deb 安装 dpkg -i *.deb 如果安装报错提示libssl1.1没有安装\nUnpacking openssl (1.1.0g-2ubuntu5) over (1.0.2g-1ubuntu4.13) ... dpkg: dependency problems prevent configuration of openssl: openssl depends on libssl1.1 (\u0026gt;= 1.1.0); however: Package libssl1.1 is not installed. dpkg: error processing package openssl (--install): dependency problems - leaving unconfigured 可以从http://security.ubuntu.com/ubuntu/pool/main/o/openssl/ 下载安装\n注意: 如果使用的是linode， 还需要在后台调整 Configuration Profile \u0026gt; Boot Settings \u0026gt; Kernel 为 GRUB 2 才能启动到更新后的内核。\n安装完成后重启一下 确认一下内核是否升级成功\nuname -a ","date":"2017-02-07T00:00:00Z","permalink":"https://hitian.info/post/ubuntu-server-install-mainline-kernel/","title":"Ubuntu Server Install Mainline Kernel"},{"content":"这几天在试用Google Cloud Platform，觉得Compute Engine的运行速度貌似挺慢的，就测试了一下\n选了距离比较近的区域 asia-east1-a, 貌似是在台湾的。\n创建了3个不同配置的实例\nf1-micro（1 个 vCPU，0.6 GB 内存） $5.00/月 g1-small（1 个 vCPU，1.7 GB 内存） $15.73/月 n1-standard-1（1 个 vCPU，3.75 GB 内存）$28.50/月 系统都选择了 Ubuntu 16.04.1 LTS\nCPU测试 测试方式 Node.js v7.4.0 源代码编译 (时间统计方式 time make)\nf1: 155m35.651s （两个多小时。。） g1: 55m9.996s n1: 28m27.362s 相比之下\ndigitalocean $5.00/月 的最低配用时 43m11.467s 本地的笔记本i7-5557m的CPU使用2个核心 27m47.806s 另外f1和g1是共享cpu的 可以看到在cpu负载上升后可以超过限制运行短暂的时间。\n然后测试一下磁盘的IO 测试方式 直接使用 dd if=/dev/zero of=/var/swap.img bs=1024k count=1000 创建一个1G的大文件\nf1: 1048576000 bytes (1.0 GB, 1000 MiB) copied, 25.6226 s, 40.9 MB/s g1: 1048576000 bytes (1.0 GB, 1000 MiB) copied, 21.2997 s, 49.2 MB/s n1: 1048576000 bytes (1.0 GB, 1000 MiB) copied, 4.83823 s, 217 MB/s 可以因为选择的是新的 10 GB 标准永久性磁盘， 速度感觉一般般了\n相比之下digitalocean因为用的SSD, 速度快了不止一点 oc: 1048576000 bytes (1.0 GB, 1000 MiB) copied, 1.71034 s, 613 MB/s\n从简单的测试数据来看， 很明显如果是平时用来折腾的vps的话GCE性价比太低了。而且不知道为什么，GCE创建一个实例差不多要耗时2分钟左右😂\nps f1 默认的0.6G内存编译Node.js竟然会不够用。加了虚拟内存之后才顺利的编译完成\nUbuntu 添加swap:\ndd if=/dev/zero of=/var/swap.img bs=1024k count=1000\nmkswap /var/swap.img\nswapon /var/swap.img\n","date":"2017-01-17T00:00:00Z","permalink":"https://hitian.info/post/google-compute-engine-simple-test/","title":"Google Compute Engine 简单测试"},{"content":"SourceTree 和 FontBook 打开就崩溃有一段时间了. 部分crash log 如下;\nProcess: SourceTree [555] Path: /Applications/SourceTree.app/Contents/MacOS/SourceTree Identifier: com.torusknot.SourceTreeNotMAS Version: 2.2.2 (51) Code Type: X86-64 (Native) Parent Process: ??? [1] Responsible: SourceTree [555] User ID: 501 Date/Time: 2016-03-13 15:34:07.628 +0800 OS Version: Mac OS X 10.11.3 (15D21) Report Version: 11 Time Awake Since Boot: 550 seconds System Integrity Protection: enabled Crashed Thread: 15 Dispatch queue: com.apple.root.default-qos Exception Type: EXC_BAD_ACCESS (SIGSEGV) Exception Codes: KERN_INVALID_ADDRESS at 0x000007fc4a1f7ab0 Exception Note: EXC_CORPSE_NOTIFY VM Regions Near 0x7fc4a1f7ab0: Process Corpse Info 0000000128acb000-0000000128ccb000 [ 2048K] rw-/rwx SM=COW --\u0026gt; JS JIT generated code 00003a1034000000-00003a1034001000 [ 4K] ---/rwx SM=NUL Application Specific Information: objc_msgSend() selector name: retain Thread 0:: Dispatch queue: com.apple.main-thread 0 com.apple.Foundation 0x000000010c558949 -[_NSCachedIndexSet autorelease] + 8 1 com.apple.AppKit 0x000000010d09762c -[NSTableView(NSTableViewViewBased) hiddenRowIndexes] + 56 2 com.apple.AppKit 0x000000010d0974ea -[_NSTableRowHeightStorage _normalComputeRectOfRow:assumingExists:] + 151 3 com.apple.AppKit 0x000000010cfcbf46 -[_NSTableRowHeightStorage computeRectOfRow:assumingExists:] + 167 4 com.apple.AppKit 0x000000010cfcbe5c -[NSTableView _rectOfRowAssumingRowExists:] + 178 5 com.apple.AppKit 0x000000010cfcbb80 -[NSTableView rectOfRow:] + 88 6 com.apple.AppKit 0x000000010cfd5e40 -[NSTableView frameOfCellAtColumn:row:] + 308 7 com.torusknot.SourceTreeNotMAS\t0x000000010a45922e 0x10a330000 + 1217070 8 com.apple.AppKit 0x000000010d09a1f3 -[NSTableView drawRow:clipRect:] + 1144 9 com.apple.AppKit 0x000000010d099aeb -[NSTableView drawRowIndexes:clipRect:] + 919 10 com.apple.AppKit 0x000000010d098403 -[NSTableView drawRect:] + 1480 11 com.apple.AppKit 0x000000010cf311fe -[NSView(NSInternal) _recursive:displayRectIgnoringOpacity:inGraphicsContext:CGContext:topView:shouldChangeFontReferenceColor:] + 1331 12 com.apple.AppKit 0x000000010cf30b98 __46-[NSView(NSLayerKitGlue) drawLayer:inContext:]_block_invoke + 242 13 com.apple.AppKit 0x000000010cf30843 -[NSView(NSLayerKitGlue) _drawViewBackingLayer:inContext:drawingHandler:] + 2403 14 com.apple.AppKit 0x000000010cf2fed5 -[NSView(NSLayerKitGlue) drawLayer:inContext:] + 108 15 com.apple.AppKit 0x000000010d0d0d8c -[_NSBackingLayerContents drawLayer:inContext:] + 157 16 com.apple.QuartzCore 0x000000010f6d3927 -[CALayer drawInContext:] + 257 17 com.apple.AppKit 0x000000010d0d0862 -[_NSTiledLayer drawTile:inContext:] + 625 18 com.apple.AppKit 0x000000010d0d0593 -[_NSTiledLayerContents drawLayer:inContext:] + 185 19 com.apple.QuartzCore 0x000000010f6d3927 -[CALayer drawInContext:] + 257 20 com.apple.AppKit 0x000000010d0d04d1 -[NSTileLayer drawInContext:] + 169 21 com.apple.QuartzCore 0x000000010f6d1e79 CABackingStoreUpdate_ + 3494 22 com.apple.QuartzCore 0x000000010f6d10cd ___ZN2CA5Layer8display_Ev_block_invoke + 59 23 com.apple.QuartzCore 0x000000010f6c4d31 CA::Layer::display_() + 1565 24 com.apple.AppKit 0x000000010d0d03e8 -[NSTileLayer display] + 119 25 com.apple.AppKit 0x000000010d850b34 -[_NSTiledLayerContents update:shouldCallPrepareContent:] + 7131 26 com.apple.AppKit 0x000000010cf7aca4 -[_NSTiledLayer display] + 368 27 com.apple.QuartzCore 0x000000010f6c310d CA::Layer::display_if_needed(CA::Transaction*) + 603 28 com.apple.QuartzCore 0x000000010f6c278d CA::Layer::layout_and_display_if_needed(CA::Transaction*) + 35 29 com.apple.QuartzCore 0x000000010f6c1cf1 CA::Context::commit_transaction(CA::Transaction*) + 277 30 com.apple.QuartzCore 0x000000010f6c1a24 CA::Transaction::commit() + 508 31 com.apple.QuartzCore 0x000000010f6d0917 CA::Transaction::observer_callback(__CFRunLoopObserver*, unsigned long, void*) + 71 32 com.apple.CoreFoundation 0x000000010b469e37 __CFRUNLOOP_IS_CALLING_OUT_TO_AN_OBSERVER_CALLBACK_FUNCTION__ + 23 33 com.apple.CoreFoundation 0x000000010b469da7 __CFRunLoopDoObservers + 391 34 com.apple.CoreFoundation 0x000000010b45b358 CFRunLoopRunSpecific + 328 35 com.apple.HIToolbox 0x00000001101cf935 RunCurrentEventLoopInMode + 235 36 com.apple.HIToolbox 0x00000001101cf76f ReceiveNextEventCommon + 432 37 com.apple.HIToolbox 0x00000001101cf5af _BlockUntilNextEventMatchingListInModeWithFilter + 71 38 com.apple.AppKit 0x000000010cecd0ee _DPSNextEvent + 1067 39 com.apple.AppKit 0x000000010d299943 -[NSApplication _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 454 40 com.apple.AppKit 0x000000010cec2fc8 -[NSApplication run] + 682 41 com.apple.AppKit 0x000000010ce45520 NSApplicationMain + 1176 42 libdyld.dylib 0x0000000111d135ad start + 1 可以看出来应该是字体导致的问题, 尝试了网上的大部分解决方案, 包括 清理 Library/FontCollections, 重建缓存什么的, 都没有效果.\n但是在GUEST账户下, 并没有崩溃的问题, 猜测和当前用户的某些配置有问题.\n终端执行 defaults read \u0026gt; ~/Downloads/defaults.txt 导出当前用户的配置信息.\n全局搜索NSFont, 在 Apple Global Domain 节点下发现了 NSFont = MicrosoftYaHei;\n看起来是之前测试MS Office 留下的. 卸载之后估计 MicrosoftYaHei 也没有了.\n打开 TinkerTool \u0026raquo; Fonts 使用 Set to default 之后崩溃的问题全部解决了.\n","date":"2016-03-13T00:00:00Z","permalink":"https://hitian.info/post/sourcetree-crash-by-font-osx/","title":"OSX上不正确的字体设置导致部分软件崩溃的问题"},{"content":"ubuntu version:\nDISTRIB_ID=Ubuntu DISTRIB_RELEASE=15.04 DISTRIB_CODENAME=vivid DISTRIB_DESCRIPTION=\u0026#34;Ubuntu 15.04\u0026#34; 新建文件 /etc/apt/sources.list.d/mongodb-org-3.0.list 内容如下 (使用aliyun的mirror进行加速)\ndeb http://mirrors.aliyun.com/mongodb/apt/ubuntu/ trusty/mongodb-org/3.0 multiverse 添加key \u0026amp; update apt:\nsudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10 sudo apt-get update 安装 mongodb 最新版本\nsudo apt-get install mongodb-org 目前安装的版本\n~$ mongo --version MongoDB shell version: 3.0.4 ","date":"2015-07-11T00:00:00Z","permalink":"https://hitian.info/post/ubuntu-install-mongodb-3.0-with-apt/","title":"ubuntu 通过apt 安装 mongodb 3.0"},{"content":"npm的加速比较简单, 直接使用淘宝的 http://npm.taobao.org/ 就可以了.\n建议直接安装 cnpm, 方便一点\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n使用的时候直接用cnpm替代npm就可以了. 例如:\ncnpm install mongodb\n也可以在使用npm 的时候单独指定\nnpm install xxx --registry=https://registry.npm.taobao.org\n这样就快多了.\n另外有时候 node-gyp rebuild 过程中下载相应node版本也很慢.\n看提示去手动下载需要的node版本.\n例如 node-v0.12.2.tar.gz\ntar zcvf node-v0.12.2.tar.gz mv ./node-v0.12.2 ~/.node-gyp/0.12.2 touch ~/.node-gyp/0.12.2/installVersion echo \u0026#34;9\u0026#34; \u0026gt;~/.node-gyp/0.12.2/installVersion ","date":"2015-04-06T00:00:00Z","permalink":"https://hitian.info/post/nodejs-npm-build-speed-up/","title":"nodejs 相关的墙内加速"},{"content":"版本号: ver 1.7\n原始固件版本: 3.17.1 Build 140120 Rel.56593n\n尝试了一下, 这个版本是不能通过web上传非官方的固件, 尝试上传openwrt会报错\n错误代码：18005 上传的文件版本与机型不符。\n评论说是加了签名的的原因.\ngoogle了下找到这篇文章:\nhttp://www.shadowandy.net/2015/03/flashing-tp-link-tl-wr703n-v1-7-to-openwrt.htm\n大家可以参照做一下.\n严重警告, 刷机需谨慎, 我是准备好TTL线才动手的, 如果没有最好不要冒险, 很容易变砖的\u0026hellip; 先按步骤生成或下载这四个要放在tftp下的文件:\naa i1 i2 busybox 我使用过的打包共享一下 百度网盘下载\n核心的3条命令:\ncurl -o - -b \u0026#34;tLargeScreenP=1; subType=pcSub; Authorization=Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag=true\u0026#34; \u0026#34;http://192.168.1.1/\u0026#34; curl -o - -b \u0026#34;tLargeScreenP=1; subType=pcSub; Authorization=Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag=\u0026#34; --referer \u0026#34;http://192.168.1.1/userRpm/ParentCtrlRpm.htm\u0026#34; \u0026#34;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?ctrl_enable=1\u0026amp;parent_mac_addr=00-00-00-00-00-02\u0026amp;Page=1\u0026#34; curl -o - -b \u0026#34;tLargeScreenP=1; subType=pcSub; Authorization=Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag=\u0026#34; --referer \u0026#34;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?Modify=0\u0026amp;Page=1\u0026#34; \u0026#34;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?child_mac=00-00-00-00-00-01\u0026amp;lan_lists=888\u0026amp;url_comment=test\u0026amp;url_0=;cd%20/tmp;\u0026amp;url_1=;tftp%20-gl%20aa%20192.168.1.9;\u0026amp;url_2=;sh%20aa;\u0026amp;url_3=\u0026amp;url_4=\u0026amp;url_5=\u0026amp;url_6=\u0026amp;url_7=\u0026amp;scheds_lists=255\u0026amp;enable=1\u0026amp;Changed=1\u0026amp;SelIndex=0\u0026amp;Page=1\u0026amp;rule_mode=0\u0026amp;Save=%B1%A3+%B4%E6\u0026#34; 有几点要注意的:\ntftp需要运行在windows上, 而且要使用32位的版本, (Mac上的tftp尝试过无效的). 将ip调整为192.168.1.9 另外执行命令之前需要先在管理界面执行恢复出厂, 重启完不要设置密码, 直接开始. windows需要自己装curl. 最后的一条命令比较慢, 一定要等到路由器的灯不在闪了, 或者直接在电脑上打开http://192.168.1.1不断的刷新, 什么时候看到OpenWrt的界面了就好了. 然后插个U盘, 升级一下空间, 就可以尽情折腾了.\n完成后:\n最后感谢一下原文的作者, 因为有这些无私共享的人, 世界才会更美好.\n还要感谢一下google, 让我很快找到了这篇文章.\n","date":"2015-03-21T00:00:00Z","permalink":"https://hitian.info/post/tp-link-tl-wr703n-v1.7-openwrt/","title":"TP-LINK TL-WR703N 刷 OpenWRT"},{"content":"Android 5.1 发布已经有一段时间了, nexus5的ROM出来也有一段时间了, 但是OTA一直不推送, 挺着急的. google了一下, 决定自己升级一下.\n####先去下载OTA的升级包\nnexus5 从5.0.1 到 5.1 的包: 百度网盘\n其他的这里下载: link\n####其他的准备\n没有adb的先去装一下 将手机的开发者模式打开(连按关于手机中的版本号) ####开始了\n先关机 按住 音量下 和 电源键 启动进入FASTBOOT MODE 按音量上下 选择 Recovery mode, 按电源键进入 自动重启后会显示一个感叹号的机器人, 下面显示无命令, 按住音量上和电源键进入recovery 的菜单. 选择apply update from ADB 并确定 连接手机到电脑, 命令行进入下载的包目录, 执行adb sideload update.zip 等待完成, 大概需要6分钟左右, 然后选择 reboot system now 完成了. 升级完成了:\n重新启动过程中会升级已有的App, 这个只能耐心等待了..\n参考: http://www.androidbeat.com/2014/12/manually-sideload-android-lollipop-update-nexus-5/\n","date":"2015-03-20T00:00:00Z","permalink":"https://hitian.info/post/manually-update-nexus-5-from-ota/","title":"手动从OTA包升级nexus 5"},{"content":"到今天为止, 折腾了10个月的游戏终于结束了, 虽然google play store的版本已经上架有一段时间了, iOS的还正在审核中, 不过后续的版本应该已经不会再开发了. 也算是这10个月的努力没有白费.\n###2013年3月###\n正在维护后端的游戏进入了最后阶段, 虽然每天都还有不少的收入, 但对于一个不算小的游戏公司来说跨国的运营已经太费力了. 于是决定一段时间后就不在进行更新了, 等玩家流失,然后关服. 项目组的人员开始慢慢的调到其他的项目组. 然后, leader问我愿不愿意跟他去开发个新游戏, 然后就去了.\n话说从大三起就一直在进行web开发, 毕业后的3年也是, 对手机端游戏开发毫无概念, 老大们决定要用js作为主要的开发语言, 然后就突然想换一下口味, 正好公司也允许我们边学边做, 然后就开始转到客户端开发了.\n###cocos2d-x + javascript###\n做web时也一直在接触js, 这方面不算陌生. cocos2d-x游戏引擎对我来说是个新的事物, 但是学习新的事物如果有一套自己的学习方式其实也是很快的, 游戏ui画面的组织其实和大学时课设做的java图形界面有点类似, 把所有的元素添加到一个树状的UI树上去, 然后在scene上显示出来, 不同的是游戏有一个主循环, 在里面进行必要的动画操作, 响应用户的操作或者是服务器的返回值对UI树进行更改.\n从0开始, 在伟大的google的帮助下, 仅仅第10天第一个demo就出来了, 虽然只有一个场景, 但是核心的消除逻辑已经可以初步使用了. 然后就立即有信心了. 项目也就正式开始了.\n###坑的开始…###\nFacebook, 因为是要在台湾发行的游戏, 决定深度整合Facebook. 由于某些原因, 即使有专线,和Facebook服务的通讯通畅度也根本就是个悲剧, 开发和测试过程中各种调用异常, 一句话, 不要在国内做这方面的开发.\njs作为开发语言是很方便, 但是如果和第三方sdk的交互比较多, 想象一下操作链: js =\u0026gt; js解释器 =\u0026gt; c++ =\u0026gt; jni =\u0026gt; java, 特别是js和c++ 是完全不同的语言类型, 我们需要做好多的接口和回调, 又是在android上运行, 互相调用时会发生各种各样的崩溃问题. 要特别感谢一下iOS没让我们在这方便花费太多的时间.\n###人永远都是很缺的###\n说起来程序应该是很多的, 但是感觉一直招不到人, 整个项目程序最多的时候也就3个正式员工加两个实习生. 大部分时间都只有两个程序, 而且服务端和客户端都要做. 还好只是不指望赚多少钱的休闲类游戏, 大部分时间也没有那么赶进度. 另外, 因为招不到正式员工, 就招很多实习生来补空缺其实挺不道德的, 根本算不上培养, 对别人的阅历其实也没什么作用. 另外, 人少就意味着各个方面都要自己动手做, 积累经验确实是快.\n###说到底还是要赚钱###\n虽然一开始立项就说没指望赚多少钱, 尝试一下新游戏类型, 积累用户. 其实公司还是很在乎钱的问题, 毕竟开发是要成本的. 开始还是很开心的, 关注的都是如何提高游戏核心玩法的品质, 然后慢慢的慢慢的关注的问题就变成了怎么赚钱, 周边的内容各种改动, 商店, 道具改了又改. 算了一下, 其实游戏的核心内容开发的时间加起来4个月都不到, 我们到底在做什么? 现实和理想的区别还是比较大的. 我也一直在纳闷为什么国人就做不出像纪念碑谷这样的游戏…\n###In the end,###\n游戏cbt之后, 其实能感觉到策划同学心不在焉已经有一段时间了. 这就意味着游戏的开发也要告一段落了. 只是没想到会这么快到来. android版本上线之后的数据并不是很理想(其实是赚的钱不是很理想), 不推广游戏是肯定是不行的, 但是推广的的成本能不能赚回来就是个问题了, 不赚钱是个硬伤啊.. 然后就没有然后了\u0026hellip;\n对于公司来说, 几个人做了一把尝试, 也培养了人才, 没什么损失, 对于我们来说也是, 从0开始学了不少东西, 也积累了不少经验. 没有像其他项目组有kpi追着经常没日没夜的加班. 日子过的还算逍遥. 只是就这样匆匆的结束了, 难免有些凄凉. 毕竟这是我开发的第一个游戏, 总想着有始有终. 我们是玩着游戏长大的一代人, 小时候也总想着有一天能自己亲自开发一个游戏, 也算实现了一个心愿吧.\n好吧, 就到这里了. 这就是我的第一个游戏的开发历程了.\n附上游戏的下载链接:\nGoogle Play Store(台湾地区): link\n话说google的分区太恶心了, 给个apk链接吧 link\nApp Store: link\n","date":"2015-01-22T00:00:00Z","permalink":"https://hitian.info/post/my-first-game/","title":"我的第一个游戏开发历程"},{"content":"环境 cocos2d-x 2.2.2 + js\n游戏的某些功能界面在Android出现了很奇怪的黑块, LOG记录到\nE/libEGL (30687): call to OpenGL ES API with no current context (logged once per thread)\ngoogle一下, 大概的原因可能是在非UI线程上操作场景上的图片资源导致的. 但是网上的情况绝大多数情况出现在 java 操作 c++ 层时出现的, 而我们是直接出现在js的回调方法中.\n回调是由某sdk执行的, 通过 java -\u0026gt; c++ -\u0026gt; js 一层层回来的.\n也就是说最终js的回调有可能是执行在非ui线程里的, 所以在这里更新界面有可能会出现问题.\n囧\u0026hellip;\n推测\njs无法决定自己运行在什么线程里, 但是可以控制界面更新在UI线程里操作.\n我们的流程是这样的.\nsdk -\u0026gt; someService -\u0026gt; controller -\u0026gt; view\n那其实我们可以打断someService 和 controller 之间的直接调用关系. 分成两步来执行.\nsdk -\u0026gt; someService -\u0026gt; [write status mark \u0026amp; store params]\n写完状态就可以直接返回了. 剩下的事情由游戏的循环来做. 游戏的循环本来就是负责界面更新的, 所以肯定不会有问题.\ngameloop -\u0026gt; [check status mark \u0026amp; do it]\n可以采用在游戏循环里去重复检测需要执行的方法. 当然如果只是一次调用最省资源的还是直接用cocos2d-x 提供的scheduler相关的方法.\nandroid在游戏开发方面的表现确实很奇葩, 加上某些不开源的SDK, 会出现什么问题就很难预测了, 为了以防万一, 甚至可以在someService -\u0026gt; controller 之前加一个的操作队列来彻底隔离有可能在错误的线程执行的问题.\n","date":"2014-09-05T00:00:00Z","permalink":"https://hitian.info/post/cocos2d-x-android-call-to-opengl-es-api-with-no-current-context/","title":"cocos2d-x 出现 call to OpenGL ES API with no current context"},{"content":"环境 cocos2d-x 2.2.2 + js\n例如一个这样的界面\n左上角的设置使用 cc.MenuItemSprite, 弹出的遮罩层和上面的按钮需要优先获取touch事件, 并阻止向后继续传播.\n这里需要两个点就可以做到.\nvar bgLayer = cc.LayerColor.extend({ ctor: function () { this._super(); cc.associateWithNative(this, cc.LayerColor); cc.registerTargetedDelegate(-129, true, this); //1.设置触摸的优先级 this.setTouchEnabled(true); }, onTouchBegan: function (touches, event) { cc.log(\u0026#34;TouchBegan: \u0026#34;); return true; //2. 在onTouchXXX 回调里返回true来吞噬掉touch事件 }, onTouchesBegan: function (touches, event) { var loc = touches[0].getLocation(); cc.log(\u0026#34;TouchesBegan: \u0026#34; + loc.x + \u0026#34; : \u0026#34; + loc.y); return true; } }); 1.设置触摸的优先级 在layer创建的时候使用 cc.registerTargetedDelegate(-129, true, this); 来设置优先级(第1个参数)\n这里的数字越小, 优先级越高,\n另外要注意的是 MenuItem 的优先级是-128, 所以要遮挡上上面的设置按钮, 遮盖层的优先级必须小于它.\n2.在onTouchXXX 回调里返回true来吞噬掉touch事件. 这里注意不是 onTouchesXXX, 看了下c++的说明, 因为多点的触摸使用的StandardDelegate并没有吃掉该事件的相关参数, 所以在onTouchesXXX 里 return true 是没有用的.\nPS 之前一直用的onTouchesXXX 来处理触摸的, 没发现居然不一样, 这个问题折腾了2个多小时, api里没有, 网上查到的各种说明都是c++的. 坑啊\u0026hellip;\n","date":"2014-04-02T00:00:00Z","permalink":"https://hitian.info/post/cocos2d-x-touch-layer-block/","title":"cocos2d-x2.2.2 触摸事件的遮挡"},{"content":"iOS7.1发布之后Xcode也更新到5.1了, 然后之前的程序就跑不起来了. 网上找的解决.\n如果出现\nUnknown register name 'q0' in asm\n请参照 http://stackoverflow.com/questions/21510187/unknown-register-name-q0-in-asm\n将 neon_matrix_impl.c 中的 #if defined(ARM_NEON) 修改为 #if defined(_ARM_ARCH_7)\n另外出现的\nEAGLView.mm:408:18: Cast from pointer to smaller type 'int' loses information\n可以参照 http://www.cocoachina.com/bbs/read.php?tid=193991#902811 5楼给出的方案修改 Targets—\u0026gt;Build Settings—\u0026gt;Architectures 的配置, 将64bit的给去掉.\nPS. 突然觉得作为刚开始入门的新手, 还是得谨慎升级. 特别是解释型脚本语言用习惯, 处理编译问题真头大.\n","date":"2014-03-15T00:00:00Z","permalink":"https://hitian.info/post/xcode5.1-cocos2d-x-error/","title":"cocos2d-x2.2.2在xcode5.1下编译问题临时解决"},{"content":"首先cocos2d-x开发游戏确实还是比较简单的. 因为可以使用js作为开发语言, 本来就会js的人入门会更快, 不过市面上的书和网上的各种教程基本都是用c++的, 所以学习过程中还是走了不少弯路.\n目前使用js作为开发语言的话, 可以在iOS, Android, Windows 上运行, 开发环境可以是MacOS+Xcode 或者Windows+VS, 不过Windows上那是非常的慢. 所以下面的都是在Mac下的.\n开始了\u0026hellip;\n官网: http://www.cocos2d-x.org/ 如果很慢请尝试使用代理\n##api文档##\n官方api文档地址\u0026raquo;\n对api的使用建议: 如果是使用js开发手机native的游戏的话, 可以使用Cocos2d-html5 的api文档配合Cocos2d-X的文档看, 因为Cocos2d-x的文档主要以c++的为主, 看js的话用起来非常的不方便, 所以我平时都是直接看html5的, 有问题的话再查一下c++的.\n##创建项目##\n这是第一个坑, 目前的稳定版本是2.2.2. 大部分书还是2.2的版本, 书里介绍的导入xcode模板的脚本现在已经没有了, 现在需要执行脚本直接生成工程.\n脚本地址 cocos2d-x-2.2.2/tools/project-creator/create_project.py\n建议使用 python2.7 来执行, 最新版的python貌似有问题\n直接执行会有参数的提示, 把参数都补上再执行一遍项目就应该创建好了.\n生成的项目会放在 cocos2d-x-2.2.2/projects/ 目录下. iOS的xcode工程在 proj.ios 下面. 要运行非常简单, 直接在Xcode里点运行就可以直接在模拟器上运行自带的HelloWorld程序了. android的运行可能要稍微麻烦一点, 可以自行Google.\n##学习##\n因为这方面的资料大部分都是c++的, 所以学习也基本是从看c++的书开始, 其实也不用会c++, 看书主要是为了大概知道cocos2d-x是如何工作的, 都有什么样的方法或者工具可以使用, 接下来就是看源代码包里提供的js的示例项目, 看一下js是怎么实现各种功能的.\n官方给了5个js的示例项目, 在目录: cocos2d-x-2.2.2/samples/Javascript/ 下, 注意js的源代码放在公用的 cocos2d-x-2.2.2/samples/Javascript/Shared/games 目录下. 认真研究一下这些代码, 在配合api文档基本上就可以开始尝试着开发自己的游戏了. 入门还是比较简单的.\n","date":"2014-03-13T00:00:00Z","permalink":"https://hitian.info/post/cocos2d-x-note/","title":"cocos2d-x 入门笔记"},{"content":"virtualbox 会自动同步虚拟机的时间, 看起来很方便, 却给开发造成了不小的麻烦.\ncmd进入virtualbox的目录 ,一般在\nC:\\Program Files\\Oracle\\VirtualBox\\\n网上说命令的格式为\nvboxmanage setextradata \u0026lt;vmname\u0026gt; \u0026quot;VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled\u0026quot; \u0026quot;1\u0026quot;\n看了下说明. 如果懒得去找 , 可以使用global 直接修改全局的配置\n执行\n./vboxmanage.exe setextradata global \u0026quot;VBoxInternal/Devices/VMMDev/0/Config/GetHostTimeDisabled\u0026quot; \u0026quot;1\u0026quot;\n然后重启虚拟机实测对guest是linux 的有效\n","date":"2013-09-20T00:00:00Z","permalink":"https://hitian.info/post/virtualbox-disable-time-sync/","title":"virtualbox 禁止时间同步"},{"content":"将自己的git服务器切换到https后clone时发生错误\nerror: SSL certificate problem, verify that the CA cert is OK. Details: error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed while accessing https://... 因为证书是自己颁发的无法通过CA的校验\ngit config --global http.sslVerify false\n这样就可以忽略校验了.\n话说gitlab版本从5.2升级到5.3还真顺利, 升级文档: https://github.com/gitlabhq/gitlabhq/blob/master/doc/update/5.2-to-5.3.md\n","date":"2013-06-23T00:00:00Z","permalink":"https://hitian.info/post/git-ignore-certificate-check/","title":"设置git忽略服务器证书校验错误"},{"content":"根据 http://redis.io 的说明， redis支持 string， list， set， sorted set 和 hash 这五种数据类型， php中可能经常需要直接把array 直接存起来。\n仔细看了下 https://github.com/nicolasff/phpredis 上的说明， 其实有个方法setOption 可以设置客户端的一些属性\n\u0026lt;?php $redis-\u0026gt;setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP); // use built-in serialize/unserialize 这样就可以使用php内置的serialize/unserialize 方法对数据进行处理\n\u0026lt;?php /** * redis test * @author jia.tian@me.com */ $redis = new Redis(); $redis-\u0026gt;connect(\u0026#39;127.0.0.1\u0026#39;, \u0026#39;6379\u0026#39;); $redis-\u0026gt;setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP); $redis-\u0026gt;set(\u0026#39;tian\u0026#39;, array(\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;tian\u0026#39;, \u0026#39;passwd\u0026#39; =\u0026gt; \u0026#39;123456\u0026#39;)); var_dump($redis-\u0026gt;get(\u0026#39;tian\u0026#39;)); $redis-\u0026gt;set(\u0026#39;tian\u0026#39;, \u0026#39;test\u0026#39;); var_dump($redis-\u0026gt;get(\u0026#39;tian\u0026#39;)); 运行结果：\narray(2) { [\u0026quot;name\u0026quot;]=\u0026gt; string(4) \u0026quot;tian\u0026quot; [\u0026quot;passwd\u0026quot;]=\u0026gt; string(6) \u0026quot;123456\u0026quot; } string(4) \u0026quot;test\u0026quot;\n可以看到将array存入和取出时会自动进行了处理这是直接在github上下载的zip包在ubuntu上安装的，可以看到版本号是2.2.2\n因为公司电脑是win环境， 找了个win的redis扩展，但是在setOption这步有点麻烦， 只要一设置就白屏。 原因仍在测试中。。。\nps：项目终于要开始大量使用redis了， 能到这一天真不容易啊。\n","date":"2013-04-12T00:00:00Z","permalink":"https://hitian.info/post/redis-notes/","title":"redis使用笔记"},{"content":"添加phpmyadmin alias\nlocation /phpmyadmin { root /usr/share/; index index.php index.html index.htm; location ~ ^/phpmyadmin/(.+\\.php)$ { try_files $uri =404; root /usr/share/; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include /etc/nginx/fastcgi_params; } location ~* ^/phpmyadmin/(.+\\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ { root /usr/share/; } } 静态文件缓存， 并且不记录日志\nlocation ~ \\.(jpg|jpeg|gif|css|png|js|ico|xml)$ { access_log off; expires 30d; } ","date":"2013-04-04T00:00:00Z","permalink":"https://hitian.info/post/nginx-notes/","title":"nginx 使用笔记"},{"content":"修改 ~/.android/adb_usb.ini 文件\n添加\n0x2207\n注意文件中不能有空行, 否则可能报错:\n* daemon not running. starting it now on port 5037 * ADB server didn\u0026#39;t ACK * failed to start daemon * 文件修改好后重启一下服务\ntianMac:platform-tools tian$ ./adb kill-server tianMac:platform-tools tian$ ./adb start-server * daemon not running. starting it now on port 5037 * * daemon started successfully * 然后应该就可以看见设备了.\n","date":"2013-02-24T00:00:00Z","permalink":"https://hitian.info/post/adb-connect-to-rk30sdk/","title":"adb连接到rk30sdk"},{"content":"今天安装subversion的过程中把httpd卸掉了， 结果重新安装的时候发生错误了\ntian-mac:~ tian$ brew install httpd ==\u0026gt; Downloading http://www.apache.org/dist/httpd/httpd-2.2.22.tar.bz2 Already downloaded: /Library/Caches/Homebrew/httpd-2.2.22.tar.bz2 ==\u0026gt; ./configure --prefix=/usr/local/Cellar/httpd/2.2.22 --mandir=/usr/local/Cellar/httpd/2.2.22/share/man --enable-layout=GNU --enable-mods-shared=all --with-ssl=/usr --wit checking whether to enable mod_substitute... shared (all) checking whether to enable mod_charset_lite... no checking whether to enable mod_deflate... checking dependencies checking for zlib location... not found checking whether to enable mod_deflate... configure: error: mod_deflate has been requested but can not be built due to prerequisite failures READ THIS: https://github.com/mxcl/homebrew/wiki/troubleshooting These open issues may also help: https://github.com/mxcl/homebrew/issues/14884 看了一下 zlib 已经安装了， 所以编辑一下安装的脚本加上zlib的路径\nbrew edit httpd\n加上一行 --with-z=/usr/local/opt/zlib/\ndef install system \u0026#34;./configure\u0026#34;, \u0026#34;--disable-debug\u0026#34;, \u0026#34;--disable-dependency-tracking\u0026#34;, \u0026#34;--prefix=#{prefix}\u0026#34;, \u0026#34;--mandir=#{man}\u0026#34;, \u0026#34;--enable-layout=GNU\u0026#34;, \u0026#34;--enable-mods-shared=all\u0026#34;, \u0026#34;--with-ssl=/usr\u0026#34;, \u0026#34;--with-z=/usr/local/opt/zlib/\u0026#34;, \u0026#34;--with-mpm=prefork\u0026#34;, \u0026#34;--disable-unique-id\u0026#34;, \u0026#34;--enable-ssl\u0026#34;, \u0026#34;--enable-dav\u0026#34;, \u0026#34;--enable-cache\u0026#34;, \u0026#34;--enable-proxy\u0026#34;, \u0026#34;--enable-logio\u0026#34;, \u0026#34;--enable-deflate\u0026#34;, \u0026#34;--with-included-apr\u0026#34;, \u0026#34;--enable-cgi\u0026#34;, \u0026#34;--enable-cgid\u0026#34;, \u0026#34;--enable-suexec\u0026#34;, \u0026#34;--enable-rewrite\u0026#34; system \u0026#34;make\u0026#34; system \u0026#34;make install\u0026#34; end 重新安装一下就好了。\n","date":"2012-12-30T00:00:00Z","permalink":"https://hitian.info/post/brew-install-httpd/","title":"brew install httpd 发生错误"},{"content":"默认的白底黑字其实看久了也挺烦， 无奈审美太差， 自己调颜色只会越弄越差。\n无意中发现了这个东西， 换主题就很方便了\n选择 Install New Software… 新增一个\nhttp://eclipse-color-theme.github.com/update/\n然后安装里面的 Eclipse Color Theme\n重启之后就可以看到了\n要换主题会非常方便。\nps: 自从安装了sublime text 之后， 对它的配色一直念念不忘。。。\n","date":"2012-12-01T00:00:00Z","permalink":"https://hitian.info/post/zendstudio-install-theme/","title":"推荐一个zendstudio调样式的新方式"},{"content":"习惯了win下直接选中文件右键对比， 在mac下找了好久，要么贵的要死，要么没有，所以决定自己创建一个。\n打开系统自带的 Automator 创建一个服务 右上 “服务”收到选定的 改为 文件货文件夹 ， 位于改为Finder.app\n左边选 使用工具 双击下面的 运行Shell 脚本\n右边 传送输入 改为 作为自变量， 下面输入 /Applications/DiffMerge.app/Contents/MacOS/DiffMerge \u0026quot;$1\u0026quot; \u0026quot;$2\u0026quot;\n参考自己的DiffMerge的位置\n好了， 现在取个名字并保存\n选中要对比的文件， 右键 -》服务 就可以看到了。\n","date":"2012-12-01T00:00:00Z","permalink":"https://hitian.info/post/diffmerge/","title":"为DiffMerge创建finder右键菜单"},{"content":"安装\nbrew update \u0026amp;\u0026amp; brew install dnsmasq\n配置\n#从模板创建配置文件\ncp /usr/local/Cellar/dnsmasq/2.63/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf\n#开机自启动\nsudo cp /usr/local/Cellar/dnsmasq/2.63/homebrew.mxcl.dnsmasq.plist /Library/LaunchDaemons/\nsudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist 编辑 /usr/local/etc/dnsmasq.conf\n修改 resolv-file=/etc/resolv.dnsmasq.conf\n如果只想本机使用 这里也修改一下\nlisten-address=127.0.0.1\n修改maxos的配置使用本地的dnsmasq\n编辑 /etc/resolv.conf\n修改 nameserver 127.0.0.1\n参考原始页面 http://blog.philippklaus.de/2012/02/install-dnsmasq-locally-on-mac-os-x-via-homebrew/\n","date":"2012-11-25T00:00:00Z","permalink":"https://hitian.info/post/macos-install-dnsmasq/","title":"mac下安装dnsmasq笔记"},{"content":"想使用v2ex的dns来加速app store， 又不想因为dns的原因导致某些网站的区域性cdn加速失效\n其实用dnsmasq很容易解决这个问题\n给路由器刷个openwrt， 然后设置就简单多了\n打开 网络 =》 DHCP/DNS 页面\n设置一下里面的DNS转发， 把v2ex的两个ip加进去, 将苹果的二级域名使用v2ex进行解析， 而其他域名还是通过本地isp的dns解析。\n/.apple.com/199.91.73.222\n/.apple.com/178.79.131.110\n保存， 大功告成\n","date":"2012-11-25T00:00:00Z","permalink":"https://hitian.info/post/openwrt-dns-configuration/","title":"openwrt dns配置"},{"content":" WinMerge\n官网：http://winmerge.org/\n一款 Windows 下的开源免费文件比较/合并工具，支持文件/文件夹比较，可以处理DOS、UNIX 和 MAC 中的文本文件，支持 Unicode 标准万国码，可以对文本文档的可视化编辑以及合并，也有语法高亮和支持压缩包功能（通过7-Zip支持）。\n之前文件对比一直用的TortoiseSVN自带的diff, 不过不是很直观, WinMerge 用起来更方便一点, 可以直接显示不同的位置, 可以直接替换掉TortoiseSVN里的. ","date":"2012-10-12T00:00:00Z","permalink":"https://hitian.info/post/winmerge/","title":"推荐个win下面好用的文件对比软件WinMerge"},{"content":"在mac上使用ssh代理其实很方便\n前提是有一个ssh账号\n命令\n$ ssh -D 1089 tian@domain.com\n会打开端口1089 监听\n查看端口可以发现\nActive Internet connections (including servers) Proto Recv-Q Send-Q Local Address Foreign Address (state) tcp6 0 0 ::1.1089 *.* LISTEN tcp4 0 0 127.0.0.1.1089 *.* LISTEN 这样连接就建立好了， 然后配置一下\n进入网络偏好设置， 选自己正在用的网络连接 -》点高级-》选择代理标签\n使用socks代理， 填上刚才的端口号\n确实非常方便。\n","date":"2012-10-01T00:00:00Z","permalink":"https://hitian.info/post/macos-simple-proxy/","title":"mac上最简单的代理方式"},{"content":"近几天博客的垃圾评论越来越多， 一天甚至好几十个。 迫不得已装个插件来防垃圾。\n由于空间禁用了php 的fsockopen 函数导致Akismet 无法连接到服务器。\n测试一下发现pfsockopen 没有被禁用， 进入akismet的目录批量替换所有fsockopen为pfsockopen。\n然后就检测正常了\n具体的功能好不好使得观察一段时间再看了。\n","date":"2012-09-10T00:00:00Z","permalink":"https://hitian.info/post/blog-comments/","title":"blog评论反垃圾"},{"content":"前几天发现的数据库注入总结一下\n发生问题的过滤:\n\u0026lt;?php $type = ( in_array($_GET[\u0026#39;t\u0026#39;],array(1,2,3)) )?$_GET[\u0026#39;t\u0026#39;]:0; 这个过滤实际不严格, 当传进来的变量以 1,2,3中的任意数字开头时过滤将失败\n当用户 传 t=1' or '1'='1 时, $type获取到的变量将维持原样, 直接传到数据库进行查询时会有注入危险\n总结和建议:所有由用户传入int 值 必须使用 intval() 进行过滤\n字符串必须使用mysql_real_escape_string() 进行过滤\n在读取 $_GET $_REQUEST $_POST $_COOKIE 时 必须进行过滤, 一般认为用户传入的数据都是不安全的.\n","date":"2012-04-29T00:00:00Z","permalink":"https://hitian.info/post/sql-injection-risk/","title":"注入风险提醒"},{"content":"一般数据库会根据使用的情况来设计, 为了保证性能一般链接的表不应该超过2个,\n但是在数据统计汇总运算的时候就麻烦了, 往往需要查好多张表才能得到需要的数据.\n如果查询很复杂的时候一次join好多张表会导致查询速度巨慢.\n当然用php等动态语言把数据取出来进行运算也不错,就是需要写代码.\n能在数据库内完成的运算 当然想要直接在库内完成\n使用临时表存储计算过程中的中间数据时隔不错的选择\n使用临时表进行数据统计， 避免出现超过3个以上的join操作\n\u0026ndash;以防万一先删除表\ndrop table if exists tmp_table;\n\u0026ndash;创建临时表的时候加上temporary 关键字就行了\ncreate temporary table tmp_table(uid bigint not null primary key, cityid int(10) unsigned, prov varchar(50), city varchar(50), group_id tinyint );\n\u0026ndash;把多个表中需要的数据组合在一起插入临时表中, 暂时没有的数据插入空字符串\ninsert into tmp_table select a.uid as uid, a.cityid as cityid,'','',0 from my_city a inner join my_op b on a.uid=b.uid where a.reg_date='2012-04-10' and b.ctime\u0026gt;0;\n\u0026ndash;联合多表更新\nupdate tmp_table a, my_city b set a.prov=b.prov, a.city=b.area where a.cityid=b.id;\n\u0026ndash;还是联合多表更新\nupdate tmp_table a, my_city_auth b set a.group_id=b.group_id where a.prov=b.prov;\n\u0026ndash;剩下的就只是把算好的数据读出来了.\n而且临时表是session级别的, 只有当前用户可见, 而且断开链接后就自动清理了.\n","date":"2012-04-12T00:00:00Z","permalink":"https://hitian.info/post/sql-note/","title":"sql笔记"},{"content":"mysql 是从4.0 升级上来的， 直接使用了latin1_swedish_ci 存储汉字，没想到带来了好多麻烦。\n首先是查询的问题\nmysql\u0026gt; select * from my_city where city=’温州’; +—-+——+ | id | city | +—-+——+ | 2 | 温州 | | 3 | 梧州 | +—-+——+ 2 rows in set (0.00 sec) 当然, 如果在city上建了唯一索引, 就会倒大霉\u0026hellip;\n然后是排序的问题\nmysql\u0026gt; select * from my_city order by city asc; +—-+——+ | id | city | +—-+——+ | 6 | 上海 | | 2 | 温州 | | 3 | 梧州 | | 5 | 西安 | | 7 | 重庆 | | 4 | 安徽 | | 8 | 北京 | +—-+——+ 7 rows in set (0.00 sec) 这个顺序看起来更让人郁闷\u0026hellip;\n临时解决方案:\nALTER TABLE `my_city` CHANGE `city` `city` VARCHAR( 25 ) CHARACTER SET latin1 COLLATE latin1_bin NULL DEFAULT NULL\n修改字段的collate 为 latin1_bin\n然后再来看\n查询正常\nmysql\u0026gt; select * from my_city where city=’温州’; +—-+——+ | id | city | +—-+——+ | 2 | 温州 | +—-+——+ 1 row in set (0.00 sec) 排序部分正常\nmysql\u0026gt; select * from my_city order by city asc; +—-+——+ | id | city | +—-+——+ | 4 | 安徽 | | 8 | 北京 | | 6 | 上海 | | 2 | 温州 | | 3 | 梧州 | | 5 | 西安 | | 7 | 重庆 | +—-+——+ 7 rows in set (0.00 sec) 要彻底解决还是要整个转换为gbk , 当然utf-8 会更好一点.\n","date":"2012-04-12T00:00:00Z","permalink":"https://hitian.info/post/latin1/","title":"用latin1来存储汉字真抓狂"},{"content":"当一个网页包含大量的内容, 而只有其中的一小部分需要是动态内容(显示用户名, 积分等)时, 通常整个页面采用html静态页面, 并使用js来加载和改变动态的部分.\n但是像这样, 如果js加载速度很慢的话, 会导致之下的页面停止渲染\u0026hellip;\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;demo6-1\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;content...\u0026lt;/p\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;get_something_api.php\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;p\u0026gt;content...\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 于是我们将js写在页面下面, 等页面渲染的差不多了再加载它\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;demo6-1\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;content...\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;content...\u0026lt;/p\u0026gt; \u0026lt;a href=\u0026#34;demo6.html\u0026#34;\u0026gt;demo6.html\u0026lt;/a\u0026gt; | \u0026lt;a href=\u0026#34;demo6-2.html\u0026#34;\u0026gt;demo6-2.html\u0026lt;/a\u0026gt; | \u0026lt;a href=\u0026#34;demo6-3.html\u0026#34;\u0026gt;demo6-3.html\u0026lt;/a\u0026gt; \u0026lt;img src=\u0026#34;27218b6e.jpg\u0026#34; width=\u0026#34;1920\u0026#34; height=\u0026#34;1200\u0026#34; border=\u0026#34;0\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;get_something_api.php\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 看起来是一个比较好的解决方案, 但是新的问题出现了.\n当由于网络或者程序执行效率的问题js的速度很慢的时候, 等待js加载过程中, 页面是可以正常操作的, 但是一旦操作有同一服务器上不同资源的请求时, 这个请求就完全卡住了, 例如点击页面上的链接. 同一服务器下资源并不能很好的多线程同时请求.\n本地用sleep模拟一个需要长时间才能完成的响应.\n\u0026lt;?php //do something and need some times header(\u0026#39;Content-Type:application/x-javascript\u0026#39;); sleep(5); echo \u0026#34;alert(\u0026#39;results\u0026#39;);\u0026#34;; ?\u0026gt; 在对get_something_api.php 的请求过程中, 点击页面内同域名下的链接, 而跳转在js加载完成后才会执行. 一般输出js可能不会执行太久, 但是当使用长连接进行一些页面信息的实时推送时, 这个问题会很大.\n解决方案就是将get_something_api.php 放到不同的域名下去, 即使两个域名指的是同一个虚拟主机, 也可以让资源并行的加载.\n","date":"2012-02-09T00:00:00Z","permalink":"https://hitian.info/post/a-little-things-about-asynchronous/","title":"关于异步的一点点其他东西"},{"content":"2010年11月15日来上海的, 已经一年多了, 在这一年忙碌的工作中成长了不少，得到了很多, 也失去了很多。 这一年中，工作上倒是参与了不少项目的开发，学习到了很多, 然后就是这种各样的无奈.\n1.首页个性设置的前端开发： 这是我第一次使用js开发了一个较复杂的完整功能模块， 也是进公司之后完成的第二个比较大的项目，开发和测试修改历时一个多月，由于不熟悉开发流程， 需求一再更改，开发周期也被迫延长， 算是一个教训吧。 不过js功力大幅增长，特别是浏览器兼容性和浏览器本地存储积累了不少实用经验。\n2.移动导航第二版的前台开发： 由于是一个触屏手机版的网站，可以使用一些前沿的技术， 让我有幸接触到了html5，还有强大的jquery-mobile框架。毕竟是新接触的东西， 由于前期的框架学习和可行性分析不够导致了开发中遇到了很多棘手的问题，让我充分了解了新技术应用可能给项目带来的风险，不过还好项目顺利完工并上线。\n3.网址导航高级版开发： 完整参与了前期的需求和开发和维护，吸取前几次的教训，在项目前期做了大量的技术测试， 包括需要用到的js拖动框架， 本地存储， 以及缓存技术， 但是对开发周期的盲目乐观导致到最后不得不加班加点才能按时完成项目，还有未整理详细的开发文档导致后面的维护遇到了很多问题。这个项目涉及从前台js一直到后台数据库设计的一整套的东西，积累了很多网站性能方面的知识，也让我明白了牵头做一个项目有多么不容易。\n4.积分系统维护：后半年正式开始专职维护积分系统，对我来说这是一个新的挑战，之前从来没有接触过这么大量的数据需要运算、存储，需要关心的不只是功能能不能实现，数据量大了之后， 性能的重要性越来越突出，可能只是很小的改动都可以让运算时间大幅减小，当然也必须非常小心，因为任何的小失误都可能导致严重的问题。\n流水帐写完了, 然后就是一些感受和吐槽:\n1.毕竟是第一份正式的工作, 我不知道100多人的公司算大还是小, 不过快速发展导致管理跟不上确实是一件严重的事情.\n2.高层的目标是宏伟的, 中层只想尽快有业绩, 作为底层员工就只是无奈.\n3.我们用一成不变的技术来应对产品策划日益更新的需求, 这样真会死人的.\n4.初期赶进度导致的考虑和设计不足将在一段时间后大规模扩大.\n5.如果所有产品策划未经任何审核的想法都提交给开发人员必须实现, 没有规划,没有长远的考虑, 甚至隔几天就要改数据结构, 改业务逻辑, 那么系统崩溃是迟早的事, 这绝对不是危言耸听.\n6.小的逻辑错误自己是很难发现的, 这就是为什么我们需要代码审查机制和专业的测试人员.\n7.没有规范的代码、架构、 注释是很可怕的，等到开始维护的时候就知道了。\n8.到一定规模时，内部自己进行一些研发是必要的，把别人的最好的东西堆起来不一定是适合自己的最优解 就写这么多了。。。\n晚安 2011-12-30\n","date":"2011-12-30T00:00:00Z","permalink":"https://hitian.info/post/annual-summary-2011/","title":"我自己的年度总结(2011)"},{"content":"在线安装: 稳定版 测试版 开发版 chromium\n离线安装包: 稳定版 测试版 开发版\n","date":"2011-12-28T00:00:00Z","permalink":"https://hitian.info/post/chrome-installer-downloads-for-win/","title":"chrome 最新版下载地址(win)"},{"content":"读取文件, 强制浏览器进行下载\nContent-Encoding: none\n没有的话 迅雷7会自动加上扩展名.gzip\nContent-type\n我要下载的是.exe文件, 所以设置为application/octet-stream\n\u0026lt;?php ob_end_clean(); header(\u0026#34;HTTP/1.1 200 OK\u0026#34;); header(\u0026#39;Cache-control: max-age=31536000\u0026#39;); header(\u0026#39;Content-Encoding: none\u0026#39;); header(\u0026#34;Content-type:application/octet-stream\u0026#34;); header(\u0026#39;Content-Disposition: attachment; filename=\u0026#39; . $file_name); header(\u0026#39;Content-Length: \u0026#39; . filesize($file_path)); // 打开文件(二进制只读模式) $fp = fopen($file_path, \u0026#39;rb\u0026#39;); // 输出文件 fpassthru($fp); // 关闭文件 fclose($fp); ","date":"2011-12-20T00:00:00Z","permalink":"https://hitian.info/post/php-file-download-set-header/","title":"php 文件下载 header 设置"},{"content":"centos5.4 配置完apache+php+mysql 环境后出现了一个很棘手的问题\n使用 Alias /phpmyadmin \u0026ldquo;/var/www/html/phpmyadmin/\u0026rdquo;\n之后访问 http://localhost/phpmyadmin/index.php 一直出403\n/var/www/html/phpmyadmin/ 目录的owner 改为apache\n并给了整个目录755的权限\n在访问的时候仍然出现了403\n解决方案:\n#chcon -R -h -t httpd_sys_content_t /var/www/html/phpmyadmin/\n本来一直使用ubuntu server 的, 没有用过centos, 为了明天的考核不得不试了下centos , 结果就出现这样纠结的问题, 翻了好久的英文网页才找到解决办法, 感谢google\u0026hellip;\n","date":"2011-12-13T00:00:00Z","permalink":"https://hitian.info/post/permission-denied-access-to-phpmyadmin/","title":"关于(13) phpmyadmin Permission denied"},{"content":"ahci模式包含了ncq等高级模式, 可以提高硬盘的性能, 而且win7内置了驱动, 不必担心像xp会蓝屏.\n但是如果是在ata模式下安装完成的win7, 再修改bios 切换到ahci模式还是会导致重新启动时蓝屏.\n解决:\n在ata模式下进入系统\n打开注册表编辑器\n修改 HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Msahci 中 Start 的值为0\n重启电脑 进bios 切换到ahci模式\n启动系统\n进入桌面后会显示有驱动正在安装.\n再手动下载安装一下intel的快速存储技术驱动就好了\u0026hellip;\n","date":"2011-12-03T00:00:00Z","permalink":"https://hitian.info/post/win7-hd-ata-to-ahci/","title":"win7安装完成后将硬盘从ATA模式切换到AHCI"},{"content":"偶然发现这个问题\nmysql\u0026gt; lock table test_my write; Query OK, 0 rows affected (0.00 sec) mysql\u0026gt; select * from test_my; Empty set (0.00 sec) mysql\u0026gt; insert into test_my values(null, 1, 1); Query OK, 1 row affected (0.00 sec) mysql\u0026gt; select * from test_my; +—-+——+——–+ | id | pid | enable | +—-+——+——–+ | 1 | 1 | 1 | +—-+——+——–+ 1 row in set (0.00 sec) mysql\u0026gt; truncate table test_my; ERROR 1192 (HY000): Can\u0026#39;t execute the given command because you have active lock ed tables or an active transaction TRUNCATE TABLE was not allowed under LOCK TABLES.\n表锁中不可以使用清空操作, 这个让我很郁闷.\nmysql\u0026gt; delete from test_my; Query OK, 1 row affected (0.00 sec) mysql\u0026gt; alter table test_my auto_increment=1; Query OK, 0 rows affected (0.05 sec) Records: 0 Duplicates: 0 Warnings: 0 mysql\u0026gt; select * from test_my; Empty set (0.00 sec) mysql\u0026gt; insert into test_my values(null, 99, 1); Query OK, 1 row affected (0.00 sec) mysql\u0026gt; select * from test_my; +—-+——+——–+ | id | pid | enable | +—-+——+——–+ | 1 | 99 | 1 | +—-+——+——–+ 1 row in set (0.00 sec) mysql\u0026gt; 分布操作: 先删除所有数据, 然后重新设置自增长的起始点却可以.\n","date":"2011-12-01T00:00:00Z","permalink":"https://hitian.info/post/mysql-table-lock/","title":"mysql表锁定中不支持清空操作?"},{"content":"打字的时候经常碰到触控板很郁闷, 在使用usb鼠标的时候可以暂时禁用触控板和小红点\nsudo modprobe -r psmouse\n重新启用\nsudo modprobe -i psmouse\n","date":"2011-11-27T00:00:00Z","permalink":"https://hitian.info/post/thinkpad-ubuntu-disable-touchpad/","title":"thinkpad ubuntu 11.10 暂时禁用触控板"},{"content":"将改变img标签的src的事件触发写在a标记的onclick里面 在ie6下会导致切换后新的图片无法加载.\n今天又发现了另一个恶心的问题\n\u0026lt;img src=\u0026#34;/images/pic1.gif\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;/images/pic2.gif\u0026#34; style=\u0026#34;display:none\u0026#34; /\u0026gt; \u0026lt;a href=\u0026#34;javascript:;\u0026#34; onclick=\u0026#34;chenge_pic();\u0026#34;\u0026gt;切换图片\u0026lt;/a\u0026gt; 像这样, 如果pic2.gif 是一个动态的图片, 当点击a标签切换图片到pic2.gid 时, 实际看到的pic2.gif 是不会动的.\n直接将第一个标签的src 改成pic2.gif 图片也是不会动的.\n和之前的解决方案一样, 将a标记换成 \u0026lt;input type=\u0026quot;button\u0026quot; /\u0026gt; 就好了.恶心的ie6, 天天画圈圈诅咒它快点消失\u0026hellip;.\n","date":"2011-11-25T00:00:00Z","permalink":"https://hitian.info/post/ie6-gif-bug/","title":"解决ie6 恶心的动态gif图片问题"},{"content":"一般来说要做一个抽奖程序会立即想到用随机数. 但是通常情况下随机数也不是那么的随机, 数量比较大的时候才能体现出比较平均, 数量较小的时候中奖概率的可控性将会很差. 一不小心多被抽中几个麻烦就大了.\n\u0026lt;?php class T_prize{ var $item; var $table; /** * 抽奖主程序 外部调用入口 * @param unknown_type $db 数据库链接 * @param unknown_type $id 抽奖类型 */ function prize($db, $id){ global $prize_set; // if(!isset($prize_set[$id])){ return false; } $this-\u0026gt;item = $prize_set[$id]; $table = \u0026#39;my_prize_store_table_\u0026#39; . $id; //抽奖并发较大时可以进行分表, 多生成几个奖池 //$table = \u0026#39;my_prize_store_table_\u0026#39; . $id . \u0026#39;_\u0026#39; . rand(0, 4); $this-\u0026gt;table = $table; //防止多个用户抽到同一个条目, 进行锁表 $db-\u0026gt;query(\u0026#34;lock table \u0026#34; . $table . \u0026#34; write\u0026#34;); $pid = $this-\u0026gt;get_one($db, $id); //奖池中没有奖品时重新初始化奖池 if($pid == \u0026#39;-1\u0026#39;){ $this-\u0026gt;create_pool($db, $id); $pid = $this-\u0026gt;get_one($db, $id); } //释放锁 返回抽奖结果 $db-\u0026gt;query(\u0026#34;unlock table\u0026#34;); return $pid; } /** * 抽奖一次 * @param unknown_type $db * @param unknown_type $id */ function get_one($db, $id){ $table = $this-\u0026gt;table; $sql = \u0026#34;SELECT * FROM ${table} WHERE enable = \u0026#39;1\u0026#39; LIMIT 1\u0026#34;; $row = $db-\u0026gt;fetch($db-\u0026gt;query($sql)); $success = false; $re = array(); if($row){ $id = $row[\u0026#39;id\u0026#39;]; $pid = $row[\u0026#39;pid\u0026#39;]; $update_data = array( \u0026#39;enable\u0026#39; =\u0026gt; 0, ); $db-\u0026gt;update($table, $update_data, \u0026#34;id=\u0026#39;$id\u0026#39;\u0026#34;); $result = $db-\u0026gt;getAffectedRows(); if($result \u0026gt; 0){ $success = true; $re = $row; }else{ my_log(\u0026#39;抽奖池条目状态修改发生错误 id:\u0026#39; . $id); } }else{ return \u0026#39;-1\u0026#39;; } if($success){ return $pid; }else{ return 0; } } /** * 奖品池初始化 * @param unknown_type $db * @param unknown_type $id */ function create_pool($db, $id){ $table = $this-\u0026gt;table; my_log(\u0026#39;init prize pool id:\u0026#39; . $id); $item = $this-\u0026gt;item; $total_num = $item[\u0026#39;total\u0026#39;]; $list = $item[\u0026#39;list\u0026#39;]; $tprize_list = array(); foreach ($list as $key=\u0026gt;$one){ $tnum = intval($total_num * $one[\u0026#39;probability\u0026#39;]); if($tnum \u0026lt; 1){ my_log(\u0026#39;create prize pool create alert: total_num:\u0026#39; . $total_num . \u0026#39; item_name:\u0026#39; . $item[\u0026#39;name\u0026#39;] . \u0026#39; probability:\u0026#39; . $item[\u0026#39;probability\u0026#39;]); continue; } for ($i = 0; $i \u0026lt; $tnum; $i ++){ do{ $id = rand(1, $total_num); }while(isset($tprize_list[$id])); $tprize_list[$id] = $key; } } my_log(\u0026#39;start\u0026#39;); $db-\u0026gt;query(\u0026#39;TRUNCATE \u0026#39; . $table); $insert_str_arr = array(); for($i=1; $i\u0026lt;=$total_num; $i++){ $this_pid = 0; $inset_data = array(\u0026#39;pid\u0026#39;=\u0026gt;0); if(isset($tprize_list[$i])){ $this_pid = $tprize_list[$i]; } //每100条记录插入一次可以大幅减小数据库插入时间时间 $insert_str_arr[] = \u0026#34;($this_pid)\u0026#34;; if($i % 100 == 0){ $insert_str = implode(\u0026#39;,\u0026#39;, $insert_str_arr); $insert_str = \u0026#39;insert into \u0026#39; . $table . \u0026#39;(pid) values\u0026#39; . $insert_str; $db-\u0026gt;query($insert_str); $insert_str_arr = array(); } } my_log(\u0026#39;end\u0026#39;); } } //自定义日志 function my_log($msg){ //write logs here } 使用奖池的概念可以将中奖概率严格限制一下, 生成一定数量的格子, 按照概率算出有奖品的格子的数量, 然后再随机填充到格子里去, 执行抽奖的时候一次去打开格子. 要么中奖,要么不中, 当所有格子都被开启过之后, 再次执行初始化重新填充所有的格子. 设置一下需要使用的奖品数据和概率\n\u0026lt;?php $prize_set = array(); //抽奖1 $prize_set[0] = array( \u0026#39;total\u0026#39; =\u0026gt; 1000, \u0026#39;list\u0026#39; =\u0026gt; array( 1 =\u0026gt; array(\u0026#39;name\u0026#39;=\u0026gt; \u0026#39;奖品1\u0026#39;, \u0026#39;probability\u0026#39;=\u0026gt; \u0026#39;0.01\u0026#39;, \u0026#39;product_id\u0026#39; =\u0026gt; 3), 2 =\u0026gt; array(\u0026#39;name\u0026#39;=\u0026gt; \u0026#39;奖品2\u0026#39;, \u0026#39;probability\u0026#39;=\u0026gt; \u0026#39;0.05\u0026#39;, \u0026#39;product_id\u0026#39; =\u0026gt; 7), 3 =\u0026gt; array(\u0026#39;name\u0026#39;=\u0026gt; \u0026#39;奖品3\u0026#39;, \u0026#39;probability\u0026#39;=\u0026gt; \u0026#39;0.1\u0026#39;, \u0026#39;product_id\u0026#39; =\u0026gt; 9), ), ); //抽奖2 $prize_set[1] = array( \u0026#39;total\u0026#39; =\u0026gt; 1000, \u0026#39;list\u0026#39; =\u0026gt; array( 1 =\u0026gt; array(\u0026#39;name\u0026#39;=\u0026gt; \u0026#39;奖品1\u0026#39;, \u0026#39;probability\u0026#39;=\u0026gt; \u0026#39;0.001\u0026#39;, \u0026#39;product_id\u0026#39; =\u0026gt; 3), 2 =\u0026gt; array(\u0026#39;name\u0026#39;=\u0026gt; \u0026#39;奖品2\u0026#39;, \u0026#39;probability\u0026#39;=\u0026gt; \u0026#39;0.005\u0026#39;, \u0026#39;product_id\u0026#39; =\u0026gt; 7), 3 =\u0026gt; array(\u0026#39;name\u0026#39;=\u0026gt; \u0026#39;奖品3\u0026#39;, \u0026#39;probability\u0026#39;=\u0026gt; \u0026#39;0.01\u0026#39;, \u0026#39;product_id\u0026#39; =\u0026gt; 9), 4 =\u0026gt; array(\u0026#39;name\u0026#39;=\u0026gt; \u0026#39;奖品4\u0026#39;, \u0026#39;probability\u0026#39;=\u0026gt; \u0026#39;0.02\u0026#39;, \u0026#39;product_id\u0026#39; =\u0026gt; 1), 5 =\u0026gt; array(\u0026#39;name\u0026#39;=\u0026gt; \u0026#39;奖品5\u0026#39;, \u0026#39;probability\u0026#39;=\u0026gt; \u0026#39;0.05\u0026#39;, \u0026#39;product_id\u0026#39; =\u0026gt; 2), 6 =\u0026gt; array(\u0026#39;name\u0026#39;=\u0026gt; \u0026#39;奖品6\u0026#39;, \u0026#39;probability\u0026#39;=\u0026gt; \u0026#39;0.1\u0026#39;, \u0026#39;product_id\u0026#39; =\u0026gt; 4), ), ); 我有两组抽奖, 所以定义了两组. 注意, 每组的总数 乘以 这组中最小的一个概率一定要大于1, 不然这个奖品就永远也没可能抽中了.\n这种方式也有缺点:\n1.概率的调整只能在下次奖池初始化时才能生效,\n2.使用数据库表锁来保证同一个格子只能被一个人抽中, 会导致性能降低, (我们使用的是myisam, 只能使用表级锁)无法支持大量的并发, 有个很笨的但最简单的解决方案就是对同一个抽奖使用多个奖池, 将请求分散到各个表去.\n后记:表在lock 状态中实际上是不支持truncate 操作的, 先delete from table 删除所有数据, 再 alter table xxx set auto_increment=1 就可以解决这个问题\u0026hellip;\n","date":"2011-11-23T00:00:00Z","permalink":"https://hitian.info/post/lottery-simulation/","title":"使用类似于奖池方式的抽奖模拟"},{"content":"每次做系统都很愁, 因为有一大堆软件需要重新安装, 尽管尽量都用绿色的还是有一大推需要安装的, 尝试着列个表, 简化一下流程\u0026hellip;\n个人文件夹迁移 将个人文件夹中的 我的视频 我的音乐 我的图片 移动到原来非系统盘的位置去 (一直很纳闷为什么这些需要大量占用磁盘空间的东西不一开始就放在非系统盘) 恢复apache和php环境 之前的都装在d盘了 以管理员运行cmd 进入D:\\lamp\\apache\\bin\nhttpd.exe -k install 将apache安装为系统服务\nhttpd.exe -k start 启动apache\nmysql 一直使用的远程的, 跳过\n将备份的host 文件覆盖 顺便调整一下修改的权限\n运行环境搞定\n安装firefox 然后安装插件 firebug;\nfirecookie;\nweb developer;\ndns flusher;\nadvanced cookie manager;\n再安装一下chrome 使用google帐号将之前的插件都同步回来\nok 调试环境也搞定\n安装 jre ; Dreamweaver ; mysql workbench; eclipse pdt; editplus ok 开发环境搞定\n","date":"2011-11-22T00:00:00Z","permalink":"https://hitian.info/post/restore-development-environment/","title":"重装系统后恢复开发环境"},{"content":"一直以来虚拟机里测试用的ubuntu server 都是在出新版本后直接重新安装的, 但是现在东西实在太多了, 懒得再重装了, 网上查了一下升级的过程作下记录:\n升级之前重要的配置文件最好先备份一下, 对于测试服务器, 我选择直接跳过\n修改一下/etc/apt/sources.list 找个快点的源, 不然会很郁闷的. 网易的就不错 mirrors.163.com\n开始升级\n$sudo apt-get install update-manager-core\n显示已经安装了最新版本\n接着\n$sudo do-release-upgrade\n因为我是ssh上去的, 系统会提示如果发生意外可以使用1022端口登录上去\n一路 y\n可以看到其实已经在get新版本的包了\n接下来漫长的半个小时等待..zzzZZ\n网速严重不给力啊\n安装新的, 有一部分老的会被删除\n接着自动重启\n看来升级成功了\n看来mysql没起来, 其他都是正常的\n(完)\u0026hellip;\n","date":"2011-11-09T00:00:00Z","permalink":"https://hitian.info/post/ubuntu-server-upgrade/","title":"ubuntu-server 版本升级"},{"content":"x64的win8 安装了x64 的jdk 再运行zendstudio时就会出错\n解决:\n再安装一下x86 的jre\n打开 C:\\Program Files (x86)\\Zend\\Zend Studio 9.0.0\\ZendStudio.ini\n添加 -vm\nC:\\Program Files (x86)\\Java\\jre6\\bin\\javaw.exe\n-name Zend Studio -vm C:\\Program Files (x86)\\Java\\jre6\\bin\\javaw.exe -vmargs ","date":"2011-11-05T00:00:00Z","permalink":"https://hitian.info/post/win7-x64-zend-studio-x86/","title":"win7 x64 运行x86的zend studio 9.0"},{"content":"在ie9 中打开gmail页面全乱 并提示ie使用了兼容性视图.并且给了修复方式:\n右键点击右上角的齿轮图标。\n选择命令栏。\n打开浏览器顶部的工具菜单，然后选择兼容性视图设置。\n在“已添加到兼容性视图中的网站”下，选择“google.com”。\n点击删除。但是在我的已添加列表中并没有google.com\n解决方法很简单, 按\u0026rsquo;F12\u0026rsquo; 打开开发人员工具, 切换一下浏览器模式然后关掉就好了\n","date":"2011-10-22T00:00:00Z","permalink":"https://hitian.info/post/gmail-ie9/","title":"gmail 在 ie9中乱版"},{"content":"php执行服务器上的脚本进行一些操作不是什么难事.\nexec system passthru 这几个函数都可以调用外部的命令. 只要有权限就完全没有问题.\n例如\nexec('/home/tian/bin/trytodosomething -h');\n命令执行后php会挂起直到命令运行完毕. 有时候脚本运行的时间也许很长, 我们需要让php继续执行及时反馈给用户我们已经开始操作了.\n$cmd = \u0026#39;/home/tian/bin/trytodosomething -h \u0026gt; /tmp/null \u0026amp;\u0026#39;; $result = system($cmd); 这样修改之后, php就会继续执行, 不会等待命令执行完这样也存在一个问题, 用户不断的刷新网页可以能造成一些麻烦, 使用文件锁就可以解决这个问题.\n","date":"2011-10-20T00:00:00Z","permalink":"https://hitian.info/post/php-exec/","title":"php执行服务器脚本"},{"content":"平时都使用脚本来共享wifi给手机\nstart_wifi.bat\u0026gt;\nnetsh wlan set hostednetwork mode=allow ssid=TIANap key=21345678 netsh wlan start hostednetwork pause 今天更新驱动时发现了intel的my wifi便试了下, 可以实时显示都有哪些设备使用了.但是有个问题就是其他设备一直不能正常获取到ip地址.\n打开my wifi创建的无线网络连接属性, 尝试着将除了internet 协议版本4 之外的其他项全取消了就好了,不知道什么原因导致的.\n","date":"2011-09-14T00:00:00Z","permalink":"https://hitian.info/post/intel-my-wifi/","title":"intel my wifi 无法获取到ip的解决"},{"content":"/** * js常用操作类 */ var myTools = window.myTools = { // getElementById g: function(id){ return document.getElementById(id); }, // getElementsByTagName t: function(name){ return document.getElementsByTagName(name); }, writeHTML: function(id, content){ var target = this.g(id); if (target != null) { target.innerHTML = content; } }, //计算字符串长度， 中文算两个字 slen: function(str){ c = 0; for (var i = 0; i \u0026lt; str.length; i++) (str.charCodeAt(i) \u0026gt; 255) ? c += 2 : c++; return c; }, // 还原html HtmlToStr: function(vStr){ vStr = vStr.replace(/\u0026amp;amp;/g, \u0026#34;\u0026amp;\u0026#34;); vStr = vStr.replace(/\u0026amp;quot;/g, \u0026#39;\u0026#34;\u0026#39;); vStr = vStr.replace(/\u0026amp;#039;/g, \u0026#34;\u0026#39;\u0026#34;); vStr = vStr.replace(/\u0026amp;lt;/g, \u0026#34;\u0026lt;\u0026#34;); vStr = vStr.replace(/\u0026amp;gt;/g, \u0026#34;\u0026gt;\u0026#34;); return vStr; }, // 转译html StrToHtml: function(str){ str = str.replace(\u0026#34;\u0026amp;\u0026#34;, /\u0026amp;amp;/g); str = str.replace(\u0026#39;\u0026#34;\u0026#39;, /\u0026amp;quot;/g); str = str.replace(\u0026#34;\u0026#39;\u0026#34;, /\u0026amp;#039;/g); str = str.replace(\u0026#34;\u0026lt;\u0026#34;, /\u0026amp;lt;/g); str = str.replace(\u0026#34;\u0026gt;\u0026#34;, /\u0026amp;gt;/g); return str; }, //按长度截取中文字符串 subs: function(str, len){ var l = 0, s = \u0026#34;\u0026#34;; for (var i = 0; i \u0026lt; str.length; i++) { (str.charCodeAt(i) \u0026gt; 128) ? l += 2 : l++; s += str.charAt(i); if (l \u0026gt;= len) { return s; } } return s; }, //获取httprequest对象 GetHttpRequest: function(){ if (window.XMLHttpRequest) { // Gecko return new XMLHttpRequest(); } else { if (window.ActiveXObject) { // IE return new ActiveXObject(\u0026#34;MsXml2.XmlHttp\u0026#34;); } } }, load_js_url: \u0026#39;\u0026#39;, //加载js loadJs: function(_url){ var callback = arguments[1] || function(){ }; this.load_js_url = _url; var _script = $c(\u0026#34;SCRIPT\u0026#34;); _script.setAttribute(\u0026#34;type\u0026#34;, \u0026#34;text/javascript\u0026#34;); _script.setAttribute(\u0026#34;src\u0026#34;, _url); $t(\u0026#34;head\u0026#34;)[0].appendChild(_script); if (document.all) { _script.onreadystatechange = function(){ if (/onload|loaded|complete/.test(_script.readyState)) { callback \u0026amp;\u0026amp; callback(); } }; } else { _script.onload = function(){ callback(); }; } }, //去空格 trim: function(str){ if (str != null \u0026amp;\u0026amp; str.length \u0026gt;= 1) { return str.replace(/(^\\s*)/g, \u0026#34;\u0026#34;); } } }; ","date":"2011-08-24T00:00:00Z","permalink":"https://hitian.info/post/js-tools/","title":"js常用操作"},{"content":"今天要使用正则来批量替换一个抓取页面中的图片地址\n\u0026lt;?php $nrjl = preg_replace_callback(\u0026#39;#\u0026lt;img.*src=\u0026#34;([^\u0026#34;]+)\u0026#34;#isU\u0026#39;, \u0026#34;tianreplace\u0026#34;, $nrjl); function tianreplace($matches){ if(substr($matches[1],0,7)==\u0026#34;http://\u0026#34;){ return \u0026#39;\u0026lt;img src=\u0026#34;\u0026#39; . $matches[1] .\u0026#39;\u0026#34;\u0026#39;; }else{ global $this_domain; return \u0026#39;\u0026lt;img src=\u0026#34;http://\u0026#39;.$this_domain.\u0026#39;/\u0026#39; . $matches[1] .\u0026#39;\u0026#34;\u0026#39;; } } ?\u0026gt; ini_set(\u0026#39;pcre.backtrack_limit\u0026#39;, 10000000); 就正常了.\n","date":"2011-08-22T00:00:00Z","permalink":"https://hitian.info/post/php-regex-length-limit/","title":"php注意正则匹配的长度限制"},{"content":"/** * tian */ //storage tools; var st = { sset : function(a, b) { storage.set(a, b); }, sget : function(a) { return storage.get(a); }, sdel : function(a) { storage.del(a); }, cset : function(a, b) { var c = [], _para = {}; for ( var d = 0, _len = arguments.length; d \u0026lt; _len; d++) { c[d] = arguments[d]; } ; _para.exps = typeof (c[2]) != \u0026#34;undefined\u0026#34; ? Math.ceil(c[2] / (3600 * 24)) : undefined; _para.name = c[0]; _para.val = c[1]; _para.path = c[3]; _para.domain = c[4]; _para.secure = c[5]; storage.cookieStore.set(_para); return false; }, cget : function(a) { return storage.cookieStore.get(a); }, cdel : function(a) { storage.cookieStore.del(a); } }; // var storage = { _g: function (id){return document.getElementById(id);}, _c: function (a){return document.createElement(a);}, _domain : \u0026#39;\u0026#39;, //设置cookie域名 _store : null, _init : false, init : function() { if (window.localStorage) { this._store = this.localStore; } else if (navigator.userAgent.indexOf(\u0026#39;MSIE\u0026#39;) \u0026gt;= 0) { this._store = this.ieStore; } this._store.init(); this.cookieStore.init(); }, set : function(a, b) { this.checkInit(); this._store.set({ name : a, val : b }); }, get : function(a) { this.checkInit(); return this._store.get(a); }, del : function(a) { this.checkInit(); this._store.del(a); }, isInit : function() { this.checkInit(); return this._store._init; }, checkInit : function() { if (!this._init) this.init(); if (!this._store.isInit()) this._store.init(); }, localStore : { _init : true, init : function() { }, get : function(a) { return localStorage.getItem(a); }, set : function(a) { localStorage.setItem(a.name, a.val); }, del : function(a) { localStorage.removeItem(a); }, isInit : function() { return true; } }, ieStore : { exps : 180, _init : false, init : function() { if (!this.isInit() \u0026amp;\u0026amp; !storage._g(\u0026#34;_ieStore\u0026#34;)) { this.store = storage._c(\u0026#34;INPUT\u0026#34;), this.store.type = \u0026#34;hidden\u0026#34;, this.store.id = \u0026#34;_ieStore\u0026#34;, this.store .addBehavior(\u0026#34;#default#userData\u0026#34;); storage._g(\u0026#34;logo\u0026#34;).appendChild(this.store); //注意这里的logo 是页面里一个标签的id,用来创建userdata的数据载体. this._init = true; } else if (storage._g(\u0026#34;_ieStore\u0026#34;)) { this.store = storage._g(\u0026#34;_ieStore\u0026#34;); this._init = true; } return this; }, get : function(a) { try { this.store.load(a); } catch (e) { return null; } return this.store.getAttribute(\u0026#34;__store__\u0026#34;) || null; }, set : function(a) { var b = a.name, _val = a.val, _exps = typeof (a.exps) != \u0026#34;undefined\u0026#34; ? a.exps : this.exps; var c = new Date(); c.setDate(c.getDate() + _exps); this.store.load(b); this.store.expires = c.toUTCString(); this.store.setAttribute(\u0026#34;__store__\u0026#34;, _val); this.store.save(b); }, del : function(a) { this.set({ name : a }, false, -1); }, isInit : function() { return this._init; } }, cookieStore : { _init : false, _exps : 180, _secure : \u0026#34;\u0026#34;, init : function() { if (!this.isInit()) { this._domain = storage._domain; this._init = true; } ; return this; }, get : function(a) { if (!this._init) this.init(); var b = document.cookie.split(\u0026#34;; \u0026#34;), a = a + \u0026#34;=\u0026#34;; for ( var c = 0, _len = b.length; c \u0026lt; _len; c++) { if (b[c].indexOf(a) != \u0026#34;-1\u0026#34;) { try { return decodeURIComponent(b[c].replace(a, \u0026#34;\u0026#34;)); } catch (e) { return unescape(b[c].replace(a, \u0026#34;\u0026#34;)); } } } return null; }, set : function(a) { if (!this._init) this.init(); var b = new Date(); var c = a.name, _val = a.val, _exps = typeof (a.exps) != \u0026#34;undefined\u0026#34; ? a.exps : this._exps, _domain = a.domain || this._domain, _path = a.path || \u0026#34;/\u0026#34;, _secure = a.secure || this._secure; b.setDate(b.getDate() + _exps); var d = c + \u0026#34;=\u0026#34; + escape(_val) + (_exps ? \u0026#34;;expires=\u0026#34; + b.toUTCString() : \u0026#34;\u0026#34;) + (_path ? \u0026#34;;path=\u0026#34; + _path : \u0026#34;\u0026#34;) + (_domain ? \u0026#34;;domain=\u0026#34; + _domain : \u0026#34;\u0026#34;) + (_secure ? \u0026#34;;secure=\u0026#34; : \u0026#34;\u0026#34;); document.cookie = d; }, del : function(a) { if (!this._init) this.init(); if (String.prototype.toLowerCase.apply(typeof (a)) == \u0026#34;string\u0026#34;) { _name = a; a = { name : _name, val : \u0026#34;\u0026#34; }; } a.exps = -1; a.secure = \u0026#34;\u0026#34;; this.set(a); }, isInit : function() { return this._init; } } }; ","date":"2011-08-21T00:00:00Z","permalink":"https://hitian.info/post/js-localstorage/","title":"js本地存储和cookie操作"},{"content":"由于业务需要, 一个表不允许两个及以上用户同时操作.由于是mysql4.1 事务等高级特性就不用想了, 存储引擎统一使用的MyISAM.其实转换成InnoDB 就可以使用行级锁了, 但是由于是线上正在使用的数据库, 数据量比较大,转换怕出现意外. 要实现的功能又是在后台使用. 所以就直接使用表级锁完全可以了.在mysql中对表加锁和解锁其实挺简单的\nLOCK TABLE table_name; UNLOCK TABLE; demo\n\u0026lt;?php $db = new Mysql(); $db-\u0026gt;open(); $db-\u0026gt;query(\u0026#34;lock table \u0026#34; . $table); $sql = \u0026#34;SELECT * FROM ${table} WHERE gid=\u0026#39;${gid}\u0026#39; AND sid IS NULL LIMIT 1\u0026#34;; $row = $db-\u0026gt;fetch($db-\u0026gt;query($sql)); $success = false; $re = array(); if($row){ $id = $row[\u0026#39;id\u0026#39;]; $update_data = array( \u0026#39;udate\u0026#39; =\u0026gt; date(\u0026#39;Y-m-d H:i:s\u0026#39;), \u0026#39;tuid\u0026#39; =\u0026gt; $uid, \u0026#39;operator\u0026#39; =\u0026gt; $_COOKIE[\u0026#39;admin_name\u0026#39;], \u0026#39;sid\u0026#39; =\u0026gt; $sid, ); $db-\u0026gt;update($this-\u0026gt;table, $update_data, \u0026#34;id=\u0026#39;$id\u0026#39;\u0026#34;); $result = $db-\u0026gt;getAffectedRows(); if($result \u0026gt; 0){ $success = true; $re = $row; }else{ $msg = \u0026#39;发生错误: 物品库存修改失败!\u0026#39;; } }else{ $msg = \u0026#39;库存不足\u0026#39;; } $db-\u0026gt;query(\u0026#34;unlock table\u0026#34;); $db-\u0026gt;close(); //return array($success, $msg, $re); ","date":"2011-07-12T00:00:00Z","permalink":"https://hitian.info/post/simple-mysql-table-level-locks/","title":"简单的mysql表级锁"},{"content":"从今天起就在这里安家了。以前也在其它地方开过博客，但是都没过多久就半途而废了，希望这次可以坚持下去。\ntian2011.07.08于地铁四号线\n","date":"2011-07-07T00:00:00Z","permalink":"https://hitian.info/post/hello-world/","title":"Hello world!"}]