<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 哈哈哈</title><link>https://hitian.info/post/</link><description>Recent content in Posts on 哈哈哈</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 13 Aug 2022 13:44:43 +0800</lastBuildDate><atom:link href="https://hitian.info/post/index.xml" rel="self" type="application/rss+xml"/><item><title>arch linux install note</title><link>https://hitian.info/post/arch-linux-install/</link><pubDate>Sat, 13 Aug 2022 13:44:43 +0800</pubDate><guid>https://hitian.info/post/arch-linux-install/</guid><description>arch linux install note
Pre-installation verify image signature
gpg --keyserver-options auto-key-retrieve --verify archlinux-version-x86_64.iso.sig
Boot Option before boot up, update BIOS Boot Options to EFI
Install partition disk list disks fdisk -l
use fdisk to modify disk partition tables
fdisk /dev/sda
example:
500 MiB for EFI system partition 2048 MiB for Linux swap remainder for Linux root partition step:
g # create a new empty GPT partition table n # create 1st partition 1 # default[1] first partition # default[2048] first sector +500M # first partition size n # create 2nd partition 2 # default[2] # default first sector +2048M # 2nd partition size n # create root partition # default[3] # default first sector # default size t # change partition type 1 # first partition 1 # partition type or alias, type 1: EFI System t # change partition type 2 # 2nd partition 19 # partition type or alias, type 19:Linux swap w # save check partition</description></item><item><title>Setup Ubuntu for Microsoft Remote Desktop</title><link>https://hitian.info/post/setup-ubuntu-for-microsoft-remote-desktop/</link><pubDate>Sun, 12 Sep 2021 14:15:39 +0800</pubDate><guid>https://hitian.info/post/setup-ubuntu-for-microsoft-remote-desktop/</guid><description>让 ubuntu 20.04 支持 Microsoft Remote Desktop 远程桌面连接
安装依赖 这里安装了桌面 xfce4 , 个人感觉ubuntu自带的GNOME 3并不是很方便远程桌面使用😶
sudo apt install xrdp xorg xfce4 xfce4-goodies dbus-x11 x11-xserver-utils xfce4-terminal 设置服务和配置 将桌面更改为 xfce, 编辑文件 /etc/xrdp/startwm.sh
# 将这两行注释 #test -x /etc/X11/Xsession &amp;amp;&amp;amp; exec /etc/X11/Xsession #exec /bin/sh /etc/X11/Xsession # 新增 exec startxfce4 设置xsession
echo xfce4-session &amp;gt; ~/.xsession 设置 xrdp 自启动并重启 sudo systemctl enable --now xrdp sudo systemctl restart xrdp 安装注意 xrdp 默认开放 3389/TCP 到所有的网卡, 如果要跨公网使用, 最好使用ufw限制一下可以连接的ip段, 另外修改默认的端口也能减少被试探的概率</description></item><item><title>macOS tips for developer</title><link>https://hitian.info/post/macos-developer-tips/</link><pubDate>Fri, 10 Sep 2021 14:03:48 +0800</pubDate><guid>https://hitian.info/post/macos-developer-tips/</guid><description>Alias alias show_tcp_port=&amp;#34;lsof -nP -iTCP&amp;#34; alias show_tcp_port_listen=&amp;#34;lsof -nP -iTCP | grep LISTEN&amp;#34; disable .DS_Store on network storage defaults write com.apple.desktopservices DSDontWriteNetworkStores true disable gatekepper for binary exec e.g. perforce command p4
tian@mac-mini ~ % xattr -p com.apple.quarantine `which p4` 0082;5fb2322c;Safari; tian@mac-mini ~ % xattr -d com.apple.quarantine `which p4` xattr: [Errno 13] Permission denied: &amp;#39;/usr/local/bin/p4&amp;#39; tian@mac-mini ~ % sudo xattr -d com.apple.quarantine `which p4` Password: tian@mac-mini ~ % xattr -p com.apple.quarantine `which p4` xattr: /usr/local/bin/p4: No such xattr: com.</description></item><item><title>修复macOS上的Firefox在全屏时会隐藏所有屏幕菜单栏的问题</title><link>https://hitian.info/post/fix-firefox-macos-full-sceen/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate><guid>https://hitian.info/post/fix-firefox-macos-full-sceen/</guid><description>针对Firefox for macOS 79.0 (64-bit)
如果macOS有多块屏幕， 在默认配置下 firefox 全屏时会隐藏所有屏幕的菜单栏，需要手动改配置修复。
地址栏输入并打开 about:config 忽略风险提示并搜索 full-screen-api 双击 full-screen-api.macos-native-full-screen 将配置更改为 true</description></item><item><title>Raspberry Pi note</title><link>https://hitian.info/post/raspberry-pi-note/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><guid>https://hitian.info/post/raspberry-pi-note/</guid><description>Raspberry Pi 笔记 B系列硬件参数 Version CPU Arch RAM USB Boot from USB Ethernet Wireless Release 1 B BCM2835 700MHz 32-bit ARM1176JZFS 256/512MB USB2 * 2 No 10/100 Mbit/s - 2012 Apr~Jun 1 B+ BCM2835 700MHz 32-bit ARM1176JZFS 256/512MB USB2 * 4 No 10/100 Mbit/s - 2014 Jul 2 B v1.1 BCM2836 900MHz 32-bit quad-core ARM Cortex-A7 1GB USB2 * 4 No 10/100 Mbit/s - 2015 Feb 2 B v1.2 BCM2837 900MHz ~ 1.</description></item><item><title>在docker中编译openwrt</title><link>https://hitian.info/post/openwrt-build-docker/</link><pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate><guid>https://hitian.info/post/openwrt-build-docker/</guid><description>在docker中编译openwrt build docker image Docker file
{% gist 88ff8a7cad5deffad51d8c29d5c47d75 Dockerfile %}
docker build --no-cache -t ubuntu-openwrt-build .
build clone openwrt source code
git clone https://git.openwrt.org/openwrt/openwrt.git
# 更新软件包 docker run -it --rm -v $PWD:/build ubuntu-openwrt-build ./scripts/feeds update -a # 使用 menuconfig 设置编译目标、内核信息、以及需要安装的包 docker run -it --rm -v $PWD:/build ubuntu-openwrt-build make menuconfig # 编译 docker run -it --rm -v $PWD:/build ubuntu-openwrt-build make -j4 生成的文件会放置在bin目录下, 例如 MT7621 放在 bin/targets/ramips/mt7621
#配置文件，同运行 make menuconfig 后生成的.config 文件，可以用于备份和还原配置 config.</description></item><item><title>ssh 代理和转发那些事</title><link>https://hitian.info/post/ssh-proxy-forward/</link><pubDate>Sat, 05 Jan 2019 00:00:00 +0000</pubDate><guid>https://hitian.info/post/ssh-proxy-forward/</guid><description>配置ssh客户端的行为 配置文件路径 ~/.ssh/config
针对目标主机的配置块示例
Host deploy-gw HostName [__target_hostname_or_ip__] User game IdentityFile ~/.ssh/deploy_private_key ProxyCommand [__connect_command__] 配置解释 除了Host之外， 其它的都是可选的 Host deploy-gw 定义使用时的名字，之后使用 ssh deploy-gw 登录目标，这个只是别名，当然这里也可以直接写hostname 或者IP地址; 当使用 Hostname 时可以进行匹配， 例如 Host *.hitian.info 可以匹配到 a.hitian.info.
HostName [__target_hostname_or_ip__] 目标的主机名或者IP地址
User tian 用户名
IdentityFile ~/.ssh/deploy_private_key 指定使用的private key路径。 替代ssh的 -i 参数一样效果
ProxyCommand ssh -q [__local_gw__] nc [__target_addr__] 22 连接目标主机时使用的命令
ssh via [http or socks proxy] 使用场景: 由于不可抗拒的因素无法直接ssh 到远程主机，或者链接过程中会被异常阻断时
这里我们需要一个 connect 命令，需要自行安装一下。
Provides SOCKS and HTTPS proxy support to SSH https://bitbucket.</description></item><item><title>新年快乐</title><link>https://hitian.info/post/happy-new-year/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://hitian.info/post/happy-new-year/</guid><description>新年快乐！ 🎊🎉</description></item><item><title>vmware esxi install update patch</title><link>https://hitian.info/post/vmware-esxi-upgrade/</link><pubDate>Sun, 30 Dec 2018 00:00:00 +0000</pubDate><guid>https://hitian.info/post/vmware-esxi-upgrade/</guid><description>Check the latest version Vmware Official https://my.vmware.com/group/vmware/patch#search
or
VMware ESXi Patch Tracker https://esxi-patches.v-front.de/ESXi-6.7.0.html
Install # From https://esxi-patches.v-front.de/ESXi-6.7.0.html # Cut and paste these commands into an ESXi shell to update your host with this Imageprofile # See the Help page for more instructions # esxcli network firewall ruleset set -e true -r httpClient esxcli software profile update -p ESXi-6.7.0-20181104001-standard \ -d https://hostupdate.vmware.com/software/VUM/PRODUCTION/main/vmw-depot-index.xml esxcli network firewall ruleset set -e false -r httpClient # # Reboot to complete the upgrade IF Errno 28 No space left on device!</description></item><item><title>更新vmware esxi ssl证书</title><link>https://hitian.info/post/vmware-esxi-upgrade-ssl-certificate/</link><pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate><guid>https://hitian.info/post/vmware-esxi-upgrade-ssl-certificate/</guid><description>esxi 的证书管理页面貌似有bug一直无法更新证书，这里直接ssh登陆服务器替换
开启SSH
Let&amp;rsquo;s Encrypt 签发的证书目录如下
hitian :: ~ » ls -al .acme.sh/hitian.me/ total 36 drwxr-xr-x 2 tian tian 4096 Mar 20 14:59 . drwx------ 8 tian tian 4096 May 27 15:41 .. -rw-r--r-- 1 tian tian 1648 May 19 00:26 ca.cer -rw-r--r-- 1 tian tian 3803 May 19 00:26 fullchain.cer -rw-r--r-- 1 tian tian 2155 May 19 00:26 hitian.me.cer -rw-r--r-- 1 tian tian 529 May 19 00:26 hitian.me.conf -rw-r--r-- 1 tian tian 980 May 19 00:24 hitian.</description></item><item><title>在Ubuntu Server上搭建Kubernetes cluster</title><link>https://hitian.info/post/kubernetes-cluster-setup-on-ubuntu-server/</link><pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate><guid>https://hitian.info/post/kubernetes-cluster-setup-on-ubuntu-server/</guid><description>&lt;h1 id="准备ubuntu-server">准备Ubuntu Server&lt;/h1>
&lt;p>安装最新版本的 ubuntu server, 可以使用网易开源镜像站加速下载&lt;/p>
&lt;p>&lt;a class="link" href="http://mirrors.163.com/ubuntu-releases/18.04/ubuntu-18.04-live-server-amd64.iso" target="_blank" rel="noopener"
>http://mirrors.163.com/ubuntu-releases/18.04/ubuntu-18.04-live-server-amd64.iso&lt;/a>&lt;/p>
&lt;h2 id="在3台主机上安装系统">在3台主机上安装系统&lt;/h2>
&lt;p>物理机或者虚拟机都可以，要求互相之前可以直连，内存建议在2G以上， 如果不跑什么大型系统的话硬盘15G就差不多了&lt;/p>
&lt;p>这里直接在VMware Esxi 上启动3个实例安装系统并指定IP地址&lt;/p>
&lt;p>&lt;img src="https://hitian.info/assets/images/201807/Kubernetes-vmware-exsi.png" alt="Kubernetes-vmware-exsi" />&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>主机&lt;/th>
&lt;th>IP&lt;/th>
&lt;th>hostname&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>c-1&lt;/td>
&lt;td>192.168.5.191&lt;/td>
&lt;td>c1&lt;/td>
&lt;td>Master&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>c-2&lt;/td>
&lt;td>192.168.5.192&lt;/td>
&lt;td>c2&lt;/td>
&lt;td>Node&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>c-3&lt;/td>
&lt;td>192.168.5.193&lt;/td>
&lt;td>c3&lt;/td>
&lt;td>Node&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="准备环境">准备环境&lt;/h2>
&lt;p>&lt;strong>下面的步骤需要在3台主机上全部执行, 注意使用root用户&lt;/strong>&lt;/p>
&lt;h3 id="可选-更换apt的更新源为国内的地址加速安装过程">(可选) 更换apt的更新源为国内的地址，加速安装过程&lt;/h3>
&lt;p>&lt;code>sed -i -- 's/archive.ubuntu.com/mirrors.163.com/g' /etc/apt/sources.list&lt;/code>&lt;/p>
&lt;h3 id="更新-apt">更新 APT&lt;/h3>
&lt;p>&lt;code>apt update -y &amp;amp;&amp;amp; apt upgrade -y&lt;/code>&lt;/p>
&lt;h3 id="安装-docker-ce">安装 Docker CE&lt;/h3>
&lt;p>以下可以参照Docker 官网的文档
&lt;a class="link" href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener"
>https://docs.docker.com/install/linux/docker-ce/ubuntu/&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装依赖&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apt-get install -y &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> apt-transport-https &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> ca-certificates &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> curl &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> software-properties-common
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Add Docker’s official GPG key:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -fsSL https://download.docker.com/linux/ubuntu/gpg &lt;span class="p">|&lt;/span> sudo apt-key add -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加Docker 的 apt repository.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">add-apt-repository &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="s2">&amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &lt;/span>&lt;span class="k">$(&lt;/span>lsb_release -cs&lt;span class="k">)&lt;/span>&lt;span class="s2"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> stable&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 更新APT 并安装Docker&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apt-get update -y &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y docker-ce
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装-kubernetes-相关的工具">安装 Kubernetes 相关的工具&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Add Google’s official GPG key:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg &lt;span class="p">|&lt;/span> apt-key add -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加 APT repository.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt;EOF &amp;gt;/etc/apt/sources.list.d/kubernetes.list
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">deb http://apt.kubernetes.io/ kubernetes-xenial main
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 更新APT 并安装&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">apt-get update -y &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get install -y kubelet kubeadm kubectl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>到这里基础环境就准备好了， 下来开始初始化， 注意下面的部分在Master主机上操作&lt;/em>&lt;/p>
&lt;h2 id="初始化-kubernetes">初始化 Kubernetes&lt;/h2>
&lt;h3 id="启动-master">启动 Master&lt;/h3>
&lt;h3 id="可选-先pull一下初始化过程中需要的docker-image-加速安装过程">(可选) 先pull一下初始化过程中需要的docker image， 加速安装过程&lt;/h3>
&lt;p>&lt;code>kubeadm config images pull&lt;/code>&lt;/p>
&lt;h3 id="初始化">初始化&lt;/h3>
&lt;p>&lt;code>kubeadm init --pod-network-cidr=10.244.0.0/16&lt;/code>&lt;/p>
&lt;p>&lt;code>pod-network-cidr&lt;/code>参数是之后创建内部网络需要的ip段，选一个没有被占用的内网段就可以了&lt;/p>
&lt;p>如果报错
&lt;code>if [ERROR Swap]: running with swap on is not supported. Please disable swap&lt;/code>&lt;/p>
&lt;p>swap 没有关闭， 使用&lt;code>swapoff -a&lt;/code>命令关闭swap再重新运行init&lt;/p></description></item><item><title>使用netplan管理ubuntu 的网络配置</title><link>https://hitian.info/post/ubuntu-server-set-network-netplan/</link><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid>https://hitian.info/post/ubuntu-server-set-network-netplan/</guid><description>最新的ubuntu已经使用netplan来管理网络配置了
列出当前的配置文件ls -al /etc/netplan/， 注意配置文件为yaml格式， 如果当前没有配置， 可以创建一个例如/etc/netplan/01-netcfg.yaml
例子 配置为使用DHCP network: version: 2 renderer: networkd ethernets: ens33: dhcp4: yes dhcp6: yes 配置为静态ip network: version: 2 renderer: networkd ethernets: ens33: dhcp4: no dhcp6: no addresses: [192.168.1.2/24] gateway4: 192.168.1.1 nameservers: addresses: [8.8.8.8,8.8.4.4] 配置文件修改好之后使用sudo netplan apply应用配置， 可以加debug参数来查看具体的过程sudo netplan --debug apply</description></item><item><title>常用的 x-callback 链接</title><link>https://hitian.info/post/x-callback-links/</link><pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate><guid>https://hitian.info/post/x-callback-links/</guid><description>OmniFocus change language Reset omnifocus:///change-preference?AppleLanguages= 中文 omnifocus:///change-preference?AppleLanguages=zh Bear Create note bear://x-callback-url/create?title=Title&amp;amp;text=Text&amp;amp;tags=tag1,tag2 Open tag bear://x-callback-url/open-tag?name=tag-name Search note bear://x-callback-url/search?term=keyword Due Add due://x-callback-url/add?title=title</description></item><item><title>Deploying an etcd cluster as a standalone cluster on docker</title><link>https://hitian.info/post/docker-run-etcd/</link><pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate><guid>https://hitian.info/post/docker-run-etcd/</guid><description>&lt;p>docker host ip addr &lt;code>192.168.5.170&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -p 2379:2379 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -p 2380:2380 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --volume&lt;span class="o">=&lt;/span>/dir/for/etcd/data:/etcd-data &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --name etcd --rm -d quay.io/coreos/etcd:latest &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> /usr/local/bin/etcd &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --data-dir&lt;span class="o">=&lt;/span>/etcd-data --name node1 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --initial-advertise-peer-urls http://192.168.5.170:2380 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --listen-peer-urls http://0.0.0.0:2380 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --advertise-client-urls http://192.168.5.170:2379 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --listen-client-urls http://0.0.0.0:2379 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --initial-cluster &lt;span class="nv">node1&lt;/span>&lt;span class="o">=&lt;/span>http://192.168.5.170:2380
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>vmware esxi unregister invalid vm</title><link>https://hitian.info/post/esxi-unregister-invalid-vm/</link><pubDate>Sun, 05 Nov 2017 00:00:00 +0000</pubDate><guid>https://hitian.info/post/esxi-unregister-invalid-vm/</guid><description>*** 以下内容针对 VMware ESXi 6.5.0 build-6765664 ***
意外删除了esxi 的一个vmfs所在的磁盘，导致vm列表下一直会显示一个invalid状态的VM， 无法进行任何操作，看着非常碍眼。显然通过web界面可能无法处理这个问题了
开启SSH服务，登录esxi。
[root@localhost:/vmfs] vim-cmd vmsvc/getallvms Skipping invalid VM &amp;#39;6&amp;#39; Vmid Name File Guest OS Version Annotation 1 ubuntu-desktop [HDD] ubuntu-desktop/ubuntu-desktop.vmx ubuntu64Guest vmx-13 11 ubuntu-server-1710 [HDD] ubuntu-server-1710/ubuntu-server-1710.vmx ubuntu64Guest vmx-13 2 ubuntu-server [HDD] ubuntu-server/ubuntu-server.vmx ubuntu64Guest vmx-13 3 windows-7 [HDD] windows-7/windows-7.vmx windows7_64Guest vmx-13 使用 vim-cmd vmsvc/getallvms 命令可以看到提示出现问题的是 VM 6， 接下来直接删除就好了。
[root@localhost:/vmfs] vim-cmd vmsvc/unregister 6 刷新web界面， 就可以看到出错的vm已经被删除了。</description></item><item><title>使用ACME Shell script和dnspod的api自动生成Let's Encrypt证书</title><link>https://hitian.info/post/acme-sh-create-letsencrypt-certificates-with-dns-api/</link><pubDate>Thu, 16 Feb 2017 00:00:00 +0000</pubDate><guid>https://hitian.info/post/acme-sh-create-letsencrypt-certificates-with-dns-api/</guid><description>安装 acme.sh curl https://get.acme.sh | sh 参考 https://github.com/Neilpang/acme.sh
安装完成之后可执行文件位于 ~/.acme.sh/acme.sh
生成 dnspod 的API Token 地址 https://www.dnspod.cn/console/user/security
用户中心 &amp;gt; 安全设置 &amp;gt; API Token &amp;gt; 创建 API Token
注意，Token 只显示一次， 保存下来， 如果忘记了， 就只能删除然后重新生成了。
还需需要记录下 API Token 的 ID
开始签发证书 参考 https://github.com/Neilpang/acme.sh/tree/master/dnsapi
首先设置环境变量
export DP_Id=&amp;#34;API Token 的 ID&amp;#34; export DP_Key=&amp;#34;API Token&amp;#34; 然后可以开始签发了
acme.sh --issue --dns dns_dp -d example.com -d www.example.com 每个 -d 参数可以指定一个域名， 可以把需要用到的子域名也全部列出来
自动运行的流程大概是这样的
使用dnspod的api 自动生成所有的验证域名txt记录 _acme-challenge.example.com， 每个子域名也会有_acme-challenge.www.example.com 等待dns记录生效，自动脚本会sleep 120 秒 检查验证的dns记录， 没有问题的话签发证书保存到本地， 再次调用api 移除验证的域名 创建crontab 自动更新相关证书。 生成好的证书位于 ~/.</description></item><item><title>Ubuntu Server Install BBR</title><link>https://hitian.info/post/ubuntu-server-install-bbr/</link><pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate><guid>https://hitian.info/post/ubuntu-server-install-bbr/</guid><description>&lt;p>首先需要更新到4.9以上的内核版本， ubuntu和debian可以参考 &lt;a class="link" href="https://hitian.info/notes/2017/02/07/ubuntu-server-install-mainline-kernel/" target="_blank" rel="noopener"
>这里&lt;/a>&lt;/p>
&lt;p>重启确认内核版本升级完成继续&lt;/p>
&lt;p>以root用户执行以下命令&lt;/p></description></item><item><title>Ubuntu Server Install Mainline Kernel</title><link>https://hitian.info/post/ubuntu-server-install-mainline-kernel/</link><pubDate>Tue, 07 Feb 2017 00:00:00 +0000</pubDate><guid>https://hitian.info/post/ubuntu-server-install-mainline-kernel/</guid><description>下载最新的内核 http://kernel.ubuntu.com/~kernel-ppa/mainline/?C=N;O=D
进入最新的版本目录
需要下载4个文件
linux-headers-XXXXX_XXXXX_all.deb linux-headers-XXXXX-generic_XXXXX_PLATFORM.deb linux-image-unsigned-XXXXX-generic_XXXXX_PLATFORM.deb linux-modules-XXXXX-generic_XXXXX_PLATFORM.deb 例如目前最新的是v4.17.5 (2018-07-09), 下载这4个文件
linux-headers-4.17.5-041705_4.17.5-041705.201807081431_all.deb linux-headers-4.17.5-041705-generic_4.17.5-041705.201807081431_amd64.deb linux-image-unsigned-4.17.5-041705-generic_4.17.5-041705.201807081431_amd64.deb linux-modules-4.17.5-041705-generic_4.17.5-041705.201807081431_amd64.deb 安装 dpkg -i *.deb 如果安装报错提示libssl1.1没有安装
Unpacking openssl (1.1.0g-2ubuntu5) over (1.0.2g-1ubuntu4.13) ... dpkg: dependency problems prevent configuration of openssl: openssl depends on libssl1.1 (&amp;gt;= 1.1.0); however: Package libssl1.1 is not installed. dpkg: error processing package openssl (--install): dependency problems - leaving unconfigured 可以从http://security.ubuntu.com/ubuntu/pool/main/o/openssl/ 下载安装
注意: 如果使用的是linode， 还需要在后台调整 Configuration Profile &amp;gt; Boot Settings &amp;gt; Kernel 为 GRUB 2 才能启动到更新后的内核。</description></item><item><title>Google Compute Engine 简单测试</title><link>https://hitian.info/post/google-compute-engine-simple-test/</link><pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate><guid>https://hitian.info/post/google-compute-engine-simple-test/</guid><description>这几天在试用Google Cloud Platform，觉得Compute Engine的运行速度貌似挺慢的，就测试了一下
选了距离比较近的区域 asia-east1-a, 貌似是在台湾的。
创建了3个不同配置的实例
f1-micro（1 个 vCPU，0.6 GB 内存） $5.00/月 g1-small（1 个 vCPU，1.7 GB 内存） $15.73/月 n1-standard-1（1 个 vCPU，3.75 GB 内存）$28.50/月 系统都选择了 Ubuntu 16.04.1 LTS
CPU测试 测试方式 Node.js v7.4.0 源代码编译 (时间统计方式 time make)
f1: 155m35.651s （两个多小时。。） g1: 55m9.996s n1: 28m27.362s 相比之下
digitalocean $5.00/月 的最低配用时 43m11.467s 本地的笔记本i7-5557m的CPU使用2个核心 27m47.806s 另外f1和g1是共享cpu的 可以看到在cpu负载上升后可以超过限制运行短暂的时间。
然后测试一下磁盘的IO 测试方式 直接使用 dd if=/dev/zero of=/var/swap.img bs=1024k count=1000 创建一个1G的大文件
f1: 1048576000 bytes (1.0 GB, 1000 MiB) copied, 25.</description></item><item><title>OSX上不正确的字体设置导致部分软件崩溃的问题</title><link>https://hitian.info/post/sourcetree-crash-by-font-osx/</link><pubDate>Sun, 13 Mar 2016 00:00:00 +0000</pubDate><guid>https://hitian.info/post/sourcetree-crash-by-font-osx/</guid><description>SourceTree 和 FontBook 打开就崩溃有一段时间了. 部分crash log 如下;
Process: SourceTree [555] Path: /Applications/SourceTree.app/Contents/MacOS/SourceTree Identifier: com.torusknot.SourceTreeNotMAS Version: 2.2.2 (51) Code Type: X86-64 (Native) Parent Process: ??? [1] Responsible: SourceTree [555] User ID: 501 Date/Time: 2016-03-13 15:34:07.628 +0800 OS Version: Mac OS X 10.11.3 (15D21) Report Version: 11 Time Awake Since Boot: 550 seconds System Integrity Protection: enabled Crashed Thread: 15 Dispatch queue: com.apple.root.default-qos Exception Type: EXC_BAD_ACCESS (SIGSEGV) Exception Codes: KERN_INVALID_ADDRESS at 0x000007fc4a1f7ab0 Exception Note: EXC_CORPSE_NOTIFY VM Regions Near 0x7fc4a1f7ab0: Process Corpse Info 0000000128acb000-0000000128ccb000 [ 2048K] rw-/rwx SM=COW --&amp;gt; JS JIT generated code 00003a1034000000-00003a1034001000 [ 4K] ---/rwx SM=NUL Application Specific Information: objc_msgSend() selector name: retain Thread 0:: Dispatch queue: com.</description></item><item><title>ubuntu 通过apt 安装 mongodb 3.0</title><link>https://hitian.info/post/ubuntu-install-mongodb-3.0-with-apt/</link><pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate><guid>https://hitian.info/post/ubuntu-install-mongodb-3.0-with-apt/</guid><description>&lt;p>ubuntu version:&lt;/p></description></item><item><title>nodejs 相关的墙内加速</title><link>https://hitian.info/post/nodejs-npm-build-speed-up/</link><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid>https://hitian.info/post/nodejs-npm-build-speed-up/</guid><description>npm的加速比较简单, 直接使用淘宝的 http://npm.taobao.org/ 就可以了.
建议直接安装 cnpm, 方便一点
npm install -g cnpm --registry=https://registry.npm.taobao.org
使用的时候直接用cnpm替代npm就可以了. 例如:
cnpm install mongodb
也可以在使用npm 的时候单独指定
npm install xxx --registry=https://registry.npm.taobao.org
这样就快多了.
另外有时候 node-gyp rebuild 过程中下载相应node版本也很慢.
看提示去手动下载需要的node版本.
例如 node-v0.12.2.tar.gz
tar zcvf node-v0.12.2.tar.gz mv ./node-v0.12.2 ~/.node-gyp/0.12.2 touch ~/.node-gyp/0.12.2/installVersion echo &amp;#34;9&amp;#34; &amp;gt;~/.node-gyp/0.12.2/installVersion</description></item><item><title>TP-LINK TL-WR703N 刷 OpenWRT</title><link>https://hitian.info/post/tp-link-tl-wr703n-v1.7-openwrt/</link><pubDate>Sat, 21 Mar 2015 00:00:00 +0000</pubDate><guid>https://hitian.info/post/tp-link-tl-wr703n-v1.7-openwrt/</guid><description>版本号: ver 1.7
原始固件版本: 3.17.1 Build 140120 Rel.56593n
尝试了一下, 这个版本是不能通过web上传非官方的固件, 尝试上传openwrt会报错
错误代码：18005 上传的文件版本与机型不符。
评论说是加了签名的的原因.
google了下找到这篇文章:
http://www.shadowandy.net/2015/03/flashing-tp-link-tl-wr703n-v1-7-to-openwrt.htm
大家可以参照做一下.
严重警告, 刷机需谨慎, 我是准备好TTL线才动手的, 如果没有最好不要冒险, 很容易变砖的&amp;hellip; 先按步骤生成或下载这四个要放在tftp下的文件:
aa i1 i2 busybox 我使用过的打包共享一下 百度网盘下载
核心的3条命令:
curl -o - -b &amp;#34;tLargeScreenP=1; subType=pcSub; Authorization=Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag=true&amp;#34; &amp;#34;http://192.168.1.1/&amp;#34; curl -o - -b &amp;#34;tLargeScreenP=1; subType=pcSub; Authorization=Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag=&amp;#34; --referer &amp;#34;http://192.168.1.1/userRpm/ParentCtrlRpm.htm&amp;#34; &amp;#34;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?ctrl_enable=1&amp;amp;parent_mac_addr=00-00-00-00-00-02&amp;amp;Page=1&amp;#34; curl -o - -b &amp;#34;tLargeScreenP=1; subType=pcSub; Authorization=Basic%20YWRtaW46YWRtaW40Mg%3D%3D; ChgPwdSubTag=&amp;#34; --referer &amp;#34;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?Modify=0&amp;amp;Page=1&amp;#34; &amp;#34;http://192.168.1.1/userRpm/ParentCtrlRpm.htm?child_mac=00-00-00-00-00-01&amp;amp;lan_lists=888&amp;amp;url_comment=test&amp;amp;url_0=;cd%20/tmp;&amp;amp;url_1=;tftp%20-gl%20aa%20192.168.1.9;&amp;amp;url_2=;sh%20aa;&amp;amp;url_3=&amp;amp;url_4=&amp;amp;url_5=&amp;amp;url_6=&amp;amp;url_7=&amp;amp;scheds_lists=255&amp;amp;enable=1&amp;amp;Changed=1&amp;amp;SelIndex=0&amp;amp;Page=1&amp;amp;rule_mode=0&amp;amp;Save=%B1%A3+%B4%E6&amp;#34; 有几点要注意的:
tftp需要运行在windows上, 而且要使用32位的版本, (Mac上的tftp尝试过无效的). 将ip调整为192.168.1.9 另外执行命令之前需要先在管理界面执行恢复出厂, 重启完不要设置密码, 直接开始. windows需要自己装curl. 最后的一条命令比较慢, 一定要等到路由器的灯不在闪了, 或者直接在电脑上打开http://192.</description></item><item><title>手动从OTA包升级nexus 5</title><link>https://hitian.info/post/manually-update-nexus-5-from-ota/</link><pubDate>Fri, 20 Mar 2015 00:00:00 +0000</pubDate><guid>https://hitian.info/post/manually-update-nexus-5-from-ota/</guid><description>Android 5.1 发布已经有一段时间了, nexus5的ROM出来也有一段时间了, 但是OTA一直不推送, 挺着急的. google了一下, 决定自己升级一下.
####先去下载OTA的升级包
nexus5 从5.0.1 到 5.1 的包: 百度网盘
其他的这里下载: link
####其他的准备
没有adb的先去装一下 将手机的开发者模式打开(连按关于手机中的版本号) ####开始了
先关机 按住 音量下 和 电源键 启动进入FASTBOOT MODE 按音量上下 选择 Recovery mode, 按电源键进入 自动重启后会显示一个感叹号的机器人, 下面显示无命令, 按住音量上和电源键进入recovery 的菜单. 选择apply update from ADB 并确定 连接手机到电脑, 命令行进入下载的包目录, 执行adb sideload update.zip 等待完成, 大概需要6分钟左右, 然后选择 reboot system now 完成了. 升级完成了:
重新启动过程中会升级已有的App, 这个只能耐心等待了..
参考: http://www.androidbeat.com/2014/12/manually-sideload-android-lollipop-update-nexus-5/</description></item><item><title>我的第一个游戏开发历程</title><link>https://hitian.info/post/my-first-game/</link><pubDate>Thu, 22 Jan 2015 00:00:00 +0000</pubDate><guid>https://hitian.info/post/my-first-game/</guid><description>到今天为止, 折腾了10个月的游戏终于结束了, 虽然google play store的版本已经上架有一段时间了, iOS的还正在审核中, 不过后续的版本应该已经不会再开发了. 也算是这10个月的努力没有白费.
###2013年3月###
正在维护后端的游戏进入了最后阶段, 虽然每天都还有不少的收入, 但对于一个不算小的游戏公司来说跨国的运营已经太费力了. 于是决定一段时间后就不在进行更新了, 等玩家流失,然后关服. 项目组的人员开始慢慢的调到其他的项目组. 然后, leader问我愿不愿意跟他去开发个新游戏, 然后就去了.
话说从大三起就一直在进行web开发, 毕业后的3年也是, 对手机端游戏开发毫无概念, 老大们决定要用js作为主要的开发语言, 然后就突然想换一下口味, 正好公司也允许我们边学边做, 然后就开始转到客户端开发了.
###cocos2d-x + javascript###
做web时也一直在接触js, 这方面不算陌生. cocos2d-x游戏引擎对我来说是个新的事物, 但是学习新的事物如果有一套自己的学习方式其实也是很快的, 游戏ui画面的组织其实和大学时课设做的java图形界面有点类似, 把所有的元素添加到一个树状的UI树上去, 然后在scene上显示出来, 不同的是游戏有一个主循环, 在里面进行必要的动画操作, 响应用户的操作或者是服务器的返回值对UI树进行更改.
从0开始, 在伟大的google的帮助下, 仅仅第10天第一个demo就出来了, 虽然只有一个场景, 但是核心的消除逻辑已经可以初步使用了. 然后就立即有信心了. 项目也就正式开始了.
###坑的开始…###
Facebook, 因为是要在台湾发行的游戏, 决定深度整合Facebook. 由于某些原因, 即使有专线,和Facebook服务的通讯通畅度也根本就是个悲剧, 开发和测试过程中各种调用异常, 一句话, 不要在国内做这方面的开发.
js作为开发语言是很方便, 但是如果和第三方sdk的交互比较多, 想象一下操作链: js =&amp;gt; js解释器 =&amp;gt; c++ =&amp;gt; jni =&amp;gt; java, 特别是js和c++ 是完全不同的语言类型, 我们需要做好多的接口和回调, 又是在android上运行, 互相调用时会发生各种各样的崩溃问题.</description></item><item><title>cocos2d-x 出现 call to OpenGL ES API with no current context</title><link>https://hitian.info/post/cocos2d-x-android-call-to-opengl-es-api-with-no-current-context/</link><pubDate>Fri, 05 Sep 2014 00:00:00 +0000</pubDate><guid>https://hitian.info/post/cocos2d-x-android-call-to-opengl-es-api-with-no-current-context/</guid><description>环境 cocos2d-x 2.2.2 + js
游戏的某些功能界面在Android出现了很奇怪的黑块, LOG记录到
E/libEGL (30687): call to OpenGL ES API with no current context (logged once per thread)
google一下, 大概的原因可能是在非UI线程上操作场景上的图片资源导致的. 但是网上的情况绝大多数情况出现在 java 操作 c++ 层时出现的, 而我们是直接出现在js的回调方法中.
回调是由某sdk执行的, 通过 java -&amp;gt; c++ -&amp;gt; js 一层层回来的.
也就是说最终js的回调有可能是执行在非ui线程里的, 所以在这里更新界面有可能会出现问题.
囧&amp;hellip;
推测
js无法决定自己运行在什么线程里, 但是可以控制界面更新在UI线程里操作.
我们的流程是这样的.
sdk -&amp;gt; someService -&amp;gt; controller -&amp;gt; view
那其实我们可以打断someService 和 controller 之间的直接调用关系. 分成两步来执行.
sdk -&amp;gt; someService -&amp;gt; [write status mark &amp;amp; store params]
写完状态就可以直接返回了. 剩下的事情由游戏的循环来做. 游戏的循环本来就是负责界面更新的, 所以肯定不会有问题.</description></item><item><title>cocos2d-x2.2.2 触摸事件的遮挡</title><link>https://hitian.info/post/cocos2d-x-touch-layer-block/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://hitian.info/post/cocos2d-x-touch-layer-block/</guid><description>环境 cocos2d-x 2.2.2 + js
例如一个这样的界面
左上角的设置使用 cc.MenuItemSprite, 弹出的遮罩层和上面的按钮需要优先获取touch事件, 并阻止向后继续传播.
这里需要两个点就可以做到.
var bgLayer = cc.LayerColor.extend({ ctor: function () { this._super(); cc.associateWithNative(this, cc.LayerColor); cc.registerTargetedDelegate(-129, true, this); //1.设置触摸的优先级 this.setTouchEnabled(true); }, onTouchBegan: function (touches, event) { cc.log(&amp;#34;TouchBegan: &amp;#34;); return true; //2. 在onTouchXXX 回调里返回true来吞噬掉touch事件 }, onTouchesBegan: function (touches, event) { var loc = touches[0].getLocation(); cc.log(&amp;#34;TouchesBegan: &amp;#34; + loc.x + &amp;#34; : &amp;#34; + loc.y); return true; } }); 1.设置触摸的优先级 在layer创建的时候使用 cc.registerTargetedDelegate(-129, true, this); 来设置优先级(第1个参数)</description></item><item><title>cocos2d-x2.2.2在xcode5.1下编译问题临时解决</title><link>https://hitian.info/post/xcode5.1-cocos2d-x-error/</link><pubDate>Sat, 15 Mar 2014 00:00:00 +0000</pubDate><guid>https://hitian.info/post/xcode5.1-cocos2d-x-error/</guid><description>iOS7.1发布之后Xcode也更新到5.1了, 然后之前的程序就跑不起来了. 网上找的解决.
如果出现
Unknown register name 'q0' in asm
请参照 http://stackoverflow.com/questions/21510187/unknown-register-name-q0-in-asm
将 neon_matrix_impl.c 中的 #if defined(ARM_NEON) 修改为 #if defined(_ARM_ARCH_7)
另外出现的
EAGLView.mm:408:18: Cast from pointer to smaller type 'int' loses information
可以参照 http://www.cocoachina.com/bbs/read.php?tid=193991#902811 5楼给出的方案修改 Targets—&amp;gt;Build Settings—&amp;gt;Architectures 的配置, 将64bit的给去掉.
PS. 突然觉得作为刚开始入门的新手, 还是得谨慎升级. 特别是解释型脚本语言用习惯, 处理编译问题真头大.</description></item><item><title>cocos2d-x 入门笔记</title><link>https://hitian.info/post/cocos2d-x-note/</link><pubDate>Thu, 13 Mar 2014 00:00:00 +0000</pubDate><guid>https://hitian.info/post/cocos2d-x-note/</guid><description>首先cocos2d-x开发游戏确实还是比较简单的. 因为可以使用js作为开发语言, 本来就会js的人入门会更快, 不过市面上的书和网上的各种教程基本都是用c++的, 所以学习过程中还是走了不少弯路.
目前使用js作为开发语言的话, 可以在iOS, Android, Windows 上运行, 开发环境可以是MacOS+Xcode 或者Windows+VS, 不过Windows上那是非常的慢. 所以下面的都是在Mac下的.
开始了&amp;hellip;
官网: http://www.cocos2d-x.org/ 如果很慢请尝试使用代理
##api文档##
官方api文档地址&amp;raquo;
对api的使用建议: 如果是使用js开发手机native的游戏的话, 可以使用Cocos2d-html5 的api文档配合Cocos2d-X的文档看, 因为Cocos2d-x的文档主要以c++的为主, 看js的话用起来非常的不方便, 所以我平时都是直接看html5的, 有问题的话再查一下c++的.
##创建项目##
这是第一个坑, 目前的稳定版本是2.2.2. 大部分书还是2.2的版本, 书里介绍的导入xcode模板的脚本现在已经没有了, 现在需要执行脚本直接生成工程.
脚本地址 cocos2d-x-2.2.2/tools/project-creator/create_project.py
建议使用 python2.7 来执行, 最新版的python貌似有问题
直接执行会有参数的提示, 把参数都补上再执行一遍项目就应该创建好了.
生成的项目会放在 cocos2d-x-2.2.2/projects/ 目录下. iOS的xcode工程在 proj.ios 下面. 要运行非常简单, 直接在Xcode里点运行就可以直接在模拟器上运行自带的HelloWorld程序了. android的运行可能要稍微麻烦一点, 可以自行Google.
##学习##
因为这方面的资料大部分都是c++的, 所以学习也基本是从看c++的书开始, 其实也不用会c++, 看书主要是为了大概知道cocos2d-x是如何工作的, 都有什么样的方法或者工具可以使用, 接下来就是看源代码包里提供的js的示例项目, 看一下js是怎么实现各种功能的.
官方给了5个js的示例项目, 在目录: cocos2d-x-2.2.2/samples/Javascript/ 下, 注意js的源代码放在公用的 cocos2d-x-2.2.2/samples/Javascript/Shared/games 目录下. 认真研究一下这些代码, 在配合api文档基本上就可以开始尝试着开发自己的游戏了. 入门还是比较简单的.</description></item><item><title>virtualbox 禁止时间同步</title><link>https://hitian.info/post/virtualbox-disable-time-sync/</link><pubDate>Fri, 20 Sep 2013 00:00:00 +0000</pubDate><guid>https://hitian.info/post/virtualbox-disable-time-sync/</guid><description>&lt;p>virtualbox 会自动同步虚拟机的时间, 看起来很方便, 却给开发造成了不小的麻烦.&lt;/p></description></item><item><title>设置git忽略服务器证书校验错误</title><link>https://hitian.info/post/git-ignore-certificate-check/</link><pubDate>Sun, 23 Jun 2013 00:00:00 +0000</pubDate><guid>https://hitian.info/post/git-ignore-certificate-check/</guid><description>将自己的git服务器切换到https后clone时发生错误
error: SSL certificate problem, verify that the CA cert is OK. Details: error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed while accessing https://... 因为证书是自己颁发的无法通过CA的校验
git config --global http.sslVerify false
这样就可以忽略校验了.
话说gitlab版本从5.2升级到5.3还真顺利, 升级文档: https://github.com/gitlabhq/gitlabhq/blob/master/doc/update/5.2-to-5.3.md</description></item><item><title>redis使用笔记</title><link>https://hitian.info/post/redis-notes/</link><pubDate>Fri, 12 Apr 2013 00:00:00 +0000</pubDate><guid>https://hitian.info/post/redis-notes/</guid><description>根据 http://redis.io 的说明， redis支持 string， list， set， sorted set 和 hash 这五种数据类型， php中可能经常需要直接把array 直接存起来。
仔细看了下 https://github.com/nicolasff/phpredis 上的说明， 其实有个方法setOption 可以设置客户端的一些属性
&amp;lt;?php $redis-&amp;gt;setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP); // use built-in serialize/unserialize 这样就可以使用php内置的serialize/unserialize 方法对数据进行处理
&amp;lt;?php /** * redis test * @author jia.tian@me.com */ $redis = new Redis(); $redis-&amp;gt;connect(&amp;#39;127.0.0.1&amp;#39;, &amp;#39;6379&amp;#39;); $redis-&amp;gt;setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_PHP); $redis-&amp;gt;set(&amp;#39;tian&amp;#39;, array(&amp;#39;name&amp;#39; =&amp;gt; &amp;#39;tian&amp;#39;, &amp;#39;passwd&amp;#39; =&amp;gt; &amp;#39;123456&amp;#39;)); var_dump($redis-&amp;gt;get(&amp;#39;tian&amp;#39;)); $redis-&amp;gt;set(&amp;#39;tian&amp;#39;, &amp;#39;test&amp;#39;); var_dump($redis-&amp;gt;get(&amp;#39;tian&amp;#39;)); 运行结果：
array(2) { [&amp;quot;name&amp;quot;]=&amp;gt; string(4) &amp;quot;tian&amp;quot; [&amp;quot;passwd&amp;quot;]=&amp;gt; string(6) &amp;quot;123456&amp;quot; } string(4) &amp;quot;test&amp;quot;
可以看到将array存入和取出时会自动进行了处理这是直接在github上下载的zip包在ubuntu上安装的，可以看到版本号是2.2.2
因为公司电脑是win环境， 找了个win的redis扩展，但是在setOption这步有点麻烦， 只要一设置就白屏。 原因仍在测试中。。。</description></item><item><title>nginx 使用笔记</title><link>https://hitian.info/post/nginx-notes/</link><pubDate>Thu, 04 Apr 2013 00:00:00 +0000</pubDate><guid>https://hitian.info/post/nginx-notes/</guid><description>添加phpmyadmin alias
location /phpmyadmin { root /usr/share/; index index.php index.html index.htm; location ~ ^/phpmyadmin/(.+\.php)$ { try_files $uri =404; root /usr/share/; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include /etc/nginx/fastcgi_params; } location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ { root /usr/share/; } } 静态文件缓存， 并且不记录日志
location ~ \.(jpg|jpeg|gif|css|png|js|ico|xml)$ { access_log off; expires 30d; }</description></item><item><title>adb连接到rk30sdk</title><link>https://hitian.info/post/adb-connect-to-rk30sdk/</link><pubDate>Sun, 24 Feb 2013 00:00:00 +0000</pubDate><guid>https://hitian.info/post/adb-connect-to-rk30sdk/</guid><description>修改 ~/.android/adb_usb.ini 文件
添加
0x2207
注意文件中不能有空行, 否则可能报错:
* daemon not running. starting it now on port 5037 * ADB server didn&amp;#39;t ACK * failed to start daemon * 文件修改好后重启一下服务
tianMac:platform-tools tian$ ./adb kill-server tianMac:platform-tools tian$ ./adb start-server * daemon not running. starting it now on port 5037 * * daemon started successfully * 然后应该就可以看见设备了.</description></item><item><title>brew install httpd 发生错误</title><link>https://hitian.info/post/brew-install-httpd/</link><pubDate>Sun, 30 Dec 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/brew-install-httpd/</guid><description>今天安装subversion的过程中把httpd卸掉了， 结果重新安装的时候发生错误了
tian-mac:~ tian$ brew install httpd ==&amp;gt; Downloading http://www.apache.org/dist/httpd/httpd-2.2.22.tar.bz2 Already downloaded: /Library/Caches/Homebrew/httpd-2.2.22.tar.bz2 ==&amp;gt; ./configure --prefix=/usr/local/Cellar/httpd/2.2.22 --mandir=/usr/local/Cellar/httpd/2.2.22/share/man --enable-layout=GNU --enable-mods-shared=all --with-ssl=/usr --wit checking whether to enable mod_substitute... shared (all) checking whether to enable mod_charset_lite... no checking whether to enable mod_deflate... checking dependencies checking for zlib location... not found checking whether to enable mod_deflate... configure: error: mod_deflate has been requested but can not be built due to prerequisite failures READ THIS: https://github.com/mxcl/homebrew/wiki/troubleshooting These open issues may also help: https://github.</description></item><item><title>推荐一个zendstudio调样式的新方式</title><link>https://hitian.info/post/zendstudio-install-theme/</link><pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/zendstudio-install-theme/</guid><description>&lt;p>默认的白底黑字其实看久了也挺烦， 无奈审美太差， 自己调颜色只会越弄越差。&lt;/p></description></item><item><title>为DiffMerge创建finder右键菜单</title><link>https://hitian.info/post/diffmerge/</link><pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/diffmerge/</guid><description>&lt;p>习惯了win下直接选中文件右键对比， 在mac下找了好久，要么贵的要死，要么没有，所以决定自己创建一个。&lt;/p></description></item><item><title>mac下安装dnsmasq笔记</title><link>https://hitian.info/post/macos-install-dnsmasq/</link><pubDate>Sun, 25 Nov 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/macos-install-dnsmasq/</guid><description>安装
brew update &amp;amp;&amp;amp; brew install dnsmasq
配置
#从模板创建配置文件
cp /usr/local/Cellar/dnsmasq/2.63/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf
#开机自启动
sudo cp /usr/local/Cellar/dnsmasq/2.63/homebrew.mxcl.dnsmasq.plist /Library/LaunchDaemons/
sudo launchctl load -w /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist 编辑 /usr/local/etc/dnsmasq.conf
修改 resolv-file=/etc/resolv.dnsmasq.conf
如果只想本机使用 这里也修改一下
listen-address=127.0.0.1
修改maxos的配置使用本地的dnsmasq
编辑 /etc/resolv.conf
修改 nameserver 127.0.0.1
参考原始页面 http://blog.philippklaus.de/2012/02/install-dnsmasq-locally-on-mac-os-x-via-homebrew/</description></item><item><title>openwrt dns配置</title><link>https://hitian.info/post/openwrt-dns-configuration/</link><pubDate>Sun, 25 Nov 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/openwrt-dns-configuration/</guid><description>想使用v2ex的dns来加速app store， 又不想因为dns的原因导致某些网站的区域性cdn加速失效
其实用dnsmasq很容易解决这个问题
给路由器刷个openwrt， 然后设置就简单多了
打开 网络 =》 DHCP/DNS 页面
设置一下里面的DNS转发， 把v2ex的两个ip加进去, 将苹果的二级域名使用v2ex进行解析， 而其他域名还是通过本地isp的dns解析。
/.apple.com/199.91.73.222
/.apple.com/178.79.131.110
保存， 大功告成</description></item><item><title>推荐个win下面好用的文件对比软件WinMerge</title><link>https://hitian.info/post/winmerge/</link><pubDate>Fri, 12 Oct 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/winmerge/</guid><description> WinMerge
官网：http://winmerge.org/
一款 Windows 下的开源免费文件比较/合并工具，支持文件/文件夹比较，可以处理DOS、UNIX 和 MAC 中的文本文件，支持 Unicode 标准万国码，可以对文本文档的可视化编辑以及合并，也有语法高亮和支持压缩包功能（通过7-Zip支持）。
之前文件对比一直用的TortoiseSVN自带的diff, 不过不是很直观, WinMerge 用起来更方便一点, 可以直接显示不同的位置, 可以直接替换掉TortoiseSVN里的.</description></item><item><title>mac上最简单的代理方式</title><link>https://hitian.info/post/macos-simple-proxy/</link><pubDate>Mon, 01 Oct 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/macos-simple-proxy/</guid><description>在mac上使用ssh代理其实很方便
前提是有一个ssh账号
命令
$ ssh -D 1089 tian@domain.com
会打开端口1089 监听
查看端口可以发现
Active Internet connections (including servers) Proto Recv-Q Send-Q Local Address Foreign Address (state) tcp6 0 0 ::1.1089 *.* LISTEN tcp4 0 0 127.0.0.1.1089 *.* LISTEN 这样连接就建立好了， 然后配置一下
进入网络偏好设置， 选自己正在用的网络连接 -》点高级-》选择代理标签
使用socks代理， 填上刚才的端口号
确实非常方便。</description></item><item><title>blog评论反垃圾</title><link>https://hitian.info/post/blog-comments/</link><pubDate>Mon, 10 Sep 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/blog-comments/</guid><description>近几天博客的垃圾评论越来越多， 一天甚至好几十个。 迫不得已装个插件来防垃圾。
由于空间禁用了php 的fsockopen 函数导致Akismet 无法连接到服务器。
测试一下发现pfsockopen 没有被禁用， 进入akismet的目录批量替换所有fsockopen为pfsockopen。
然后就检测正常了
具体的功能好不好使得观察一段时间再看了。</description></item><item><title>注入风险提醒</title><link>https://hitian.info/post/sql-injection-risk/</link><pubDate>Sun, 29 Apr 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/sql-injection-risk/</guid><description>前几天发现的数据库注入总结一下
发生问题的过滤:
&amp;lt;?php $type = ( in_array($_GET[&amp;#39;t&amp;#39;],array(1,2,3)) )?$_GET[&amp;#39;t&amp;#39;]:0; 这个过滤实际不严格, 当传进来的变量以 1,2,3中的任意数字开头时过滤将失败
当用户 传 t=1' or '1'='1 时, $type获取到的变量将维持原样, 直接传到数据库进行查询时会有注入危险
总结和建议:所有由用户传入int 值 必须使用 intval() 进行过滤
字符串必须使用mysql_real_escape_string() 进行过滤
在读取 $_GET $_REQUEST $_POST $_COOKIE 时 必须进行过滤, 一般认为用户传入的数据都是不安全的.</description></item><item><title>sql笔记</title><link>https://hitian.info/post/sql-note/</link><pubDate>Thu, 12 Apr 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/sql-note/</guid><description>一般数据库会根据使用的情况来设计, 为了保证性能一般链接的表不应该超过2个,
但是在数据统计汇总运算的时候就麻烦了, 往往需要查好多张表才能得到需要的数据.
如果查询很复杂的时候一次join好多张表会导致查询速度巨慢.
当然用php等动态语言把数据取出来进行运算也不错,就是需要写代码.
能在数据库内完成的运算 当然想要直接在库内完成
使用临时表存储计算过程中的中间数据时隔不错的选择
使用临时表进行数据统计， 避免出现超过3个以上的join操作
&amp;ndash;以防万一先删除表
drop table if exists tmp_table;
&amp;ndash;创建临时表的时候加上temporary 关键字就行了
create temporary table tmp_table(uid bigint not null primary key, cityid int(10) unsigned, prov varchar(50), city varchar(50), group_id tinyint );
&amp;ndash;把多个表中需要的数据组合在一起插入临时表中, 暂时没有的数据插入空字符串
insert into tmp_table select a.uid as uid, a.cityid as cityid,'','',0 from my_city a inner join my_op b on a.uid=b.uid where a.reg_date='2012-04-10' and b.ctime&amp;gt;0;
&amp;ndash;联合多表更新
update tmp_table a, my_city b set a.</description></item><item><title>用latin1来存储汉字真抓狂</title><link>https://hitian.info/post/latin1/</link><pubDate>Thu, 12 Apr 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/latin1/</guid><description>mysql 是从4.0 升级上来的， 直接使用了latin1_swedish_ci 存储汉字，没想到带来了好多麻烦。
首先是查询的问题
mysql&amp;gt; select * from my_city where city=’温州’; +—-+——+ | id | city | +—-+——+ | 2 | 温州 | | 3 | 梧州 | +—-+——+ 2 rows in set (0.00 sec) 当然, 如果在city上建了唯一索引, 就会倒大霉&amp;hellip;
然后是排序的问题
mysql&amp;gt; select * from my_city order by city asc; +—-+——+ | id | city | +—-+——+ | 6 | 上海 | | 2 | 温州 | | 3 | 梧州 | | 5 | 西安 | | 7 | 重庆 | | 4 | 安徽 | | 8 | 北京 | +—-+——+ 7 rows in set (0.</description></item><item><title>关于异步的一点点其他东西</title><link>https://hitian.info/post/a-little-things-about-asynchronous/</link><pubDate>Thu, 09 Feb 2012 00:00:00 +0000</pubDate><guid>https://hitian.info/post/a-little-things-about-asynchronous/</guid><description>当一个网页包含大量的内容, 而只有其中的一小部分需要是动态内容(显示用户名, 积分等)时, 通常整个页面采用html静态页面, 并使用js来加载和改变动态的部分.
但是像这样, 如果js加载速度很慢的话, 会导致之下的页面停止渲染&amp;hellip;
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;demo6-1&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;content...&amp;lt;/p&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;get_something_api.php&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;p&amp;gt;content...&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 于是我们将js写在页面下面, 等页面渲染的差不多了再加载它
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;demo6-1&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;content...&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;content...&amp;lt;/p&amp;gt; &amp;lt;a href=&amp;#34;demo6.html&amp;#34;&amp;gt;demo6.html&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;demo6-2.html&amp;#34;&amp;gt;demo6-2.html&amp;lt;/a&amp;gt; | &amp;lt;a href=&amp;#34;demo6-3.html&amp;#34;&amp;gt;demo6-3.html&amp;lt;/a&amp;gt; &amp;lt;img src=&amp;#34;27218b6e.jpg&amp;#34; width=&amp;#34;1920&amp;#34; height=&amp;#34;1200&amp;#34; border=&amp;#34;0&amp;#34; alt=&amp;#34;&amp;#34;&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;get_something_api.php&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 看起来是一个比较好的解决方案, 但是新的问题出现了.
当由于网络或者程序执行效率的问题js的速度很慢的时候, 等待js加载过程中, 页面是可以正常操作的, 但是一旦操作有同一服务器上不同资源的请求时, 这个请求就完全卡住了, 例如点击页面上的链接. 同一服务器下资源并不能很好的多线程同时请求.
本地用sleep模拟一个需要长时间才能完成的响应.
&amp;lt;?php //do something and need some times header(&amp;#39;Content-Type:application/x-javascript&amp;#39;); sleep(5); echo &amp;#34;alert(&amp;#39;results&amp;#39;);&amp;#34;; ?&amp;gt; 在对get_something_api.</description></item><item><title>我自己的年度总结(2011)</title><link>https://hitian.info/post/annual-summary-2011/</link><pubDate>Fri, 30 Dec 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/annual-summary-2011/</guid><description>2010年11月15日来上海的, 已经一年多了, 在这一年忙碌的工作中成长了不少，得到了很多, 也失去了很多。 这一年中，工作上倒是参与了不少项目的开发，学习到了很多, 然后就是这种各样的无奈.
1.首页个性设置的前端开发： 这是我第一次使用js开发了一个较复杂的完整功能模块， 也是进公司之后完成的第二个比较大的项目，开发和测试修改历时一个多月，由于不熟悉开发流程， 需求一再更改，开发周期也被迫延长， 算是一个教训吧。 不过js功力大幅增长，特别是浏览器兼容性和浏览器本地存储积累了不少实用经验。
2.移动导航第二版的前台开发： 由于是一个触屏手机版的网站，可以使用一些前沿的技术， 让我有幸接触到了html5，还有强大的jquery-mobile框架。毕竟是新接触的东西， 由于前期的框架学习和可行性分析不够导致了开发中遇到了很多棘手的问题，让我充分了解了新技术应用可能给项目带来的风险，不过还好项目顺利完工并上线。
3.网址导航高级版开发： 完整参与了前期的需求和开发和维护，吸取前几次的教训，在项目前期做了大量的技术测试， 包括需要用到的js拖动框架， 本地存储， 以及缓存技术， 但是对开发周期的盲目乐观导致到最后不得不加班加点才能按时完成项目，还有未整理详细的开发文档导致后面的维护遇到了很多问题。这个项目涉及从前台js一直到后台数据库设计的一整套的东西，积累了很多网站性能方面的知识，也让我明白了牵头做一个项目有多么不容易。
4.积分系统维护：后半年正式开始专职维护积分系统，对我来说这是一个新的挑战，之前从来没有接触过这么大量的数据需要运算、存储，需要关心的不只是功能能不能实现，数据量大了之后， 性能的重要性越来越突出，可能只是很小的改动都可以让运算时间大幅减小，当然也必须非常小心，因为任何的小失误都可能导致严重的问题。
流水帐写完了, 然后就是一些感受和吐槽:
1.毕竟是第一份正式的工作, 我不知道100多人的公司算大还是小, 不过快速发展导致管理跟不上确实是一件严重的事情.
2.高层的目标是宏伟的, 中层只想尽快有业绩, 作为底层员工就只是无奈.
3.我们用一成不变的技术来应对产品策划日益更新的需求, 这样真会死人的.
4.初期赶进度导致的考虑和设计不足将在一段时间后大规模扩大.
5.如果所有产品策划未经任何审核的想法都提交给开发人员必须实现, 没有规划,没有长远的考虑, 甚至隔几天就要改数据结构, 改业务逻辑, 那么系统崩溃是迟早的事, 这绝对不是危言耸听.
6.小的逻辑错误自己是很难发现的, 这就是为什么我们需要代码审查机制和专业的测试人员.
7.没有规范的代码、架构、 注释是很可怕的，等到开始维护的时候就知道了。
8.到一定规模时，内部自己进行一些研发是必要的，把别人的最好的东西堆起来不一定是适合自己的最优解 就写这么多了。。。
晚安 2011-12-30</description></item><item><title>chrome 最新版下载地址(win)</title><link>https://hitian.info/post/chrome-installer-downloads-for-win/</link><pubDate>Wed, 28 Dec 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/chrome-installer-downloads-for-win/</guid><description>在线安装: 稳定版 测试版 开发版 chromium
离线安装包: 稳定版 测试版 开发版</description></item><item><title>php 文件下载 header 设置</title><link>https://hitian.info/post/php-file-download-set-header/</link><pubDate>Tue, 20 Dec 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/php-file-download-set-header/</guid><description>&lt;p>读取文件, 强制浏览器进行下载&lt;/p></description></item><item><title>关于(13) phpmyadmin Permission denied</title><link>https://hitian.info/post/permission-denied-access-to-phpmyadmin/</link><pubDate>Tue, 13 Dec 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/permission-denied-access-to-phpmyadmin/</guid><description>centos5.4 配置完apache+php+mysql 环境后出现了一个很棘手的问题
使用 Alias /phpmyadmin &amp;ldquo;/var/www/html/phpmyadmin/&amp;rdquo;
之后访问 http://localhost/phpmyadmin/index.php 一直出403
/var/www/html/phpmyadmin/ 目录的owner 改为apache
并给了整个目录755的权限
在访问的时候仍然出现了403
解决方案:
#chcon -R -h -t httpd_sys_content_t /var/www/html/phpmyadmin/
本来一直使用ubuntu server 的, 没有用过centos, 为了明天的考核不得不试了下centos , 结果就出现这样纠结的问题, 翻了好久的英文网页才找到解决办法, 感谢google&amp;hellip;</description></item><item><title>win7安装完成后将硬盘从ATA模式切换到AHCI</title><link>https://hitian.info/post/win7-hd-ata-to-ahci/</link><pubDate>Sat, 03 Dec 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/win7-hd-ata-to-ahci/</guid><description>ahci模式包含了ncq等高级模式, 可以提高硬盘的性能, 而且win7内置了驱动, 不必担心像xp会蓝屏.
但是如果是在ata模式下安装完成的win7, 再修改bios 切换到ahci模式还是会导致重新启动时蓝屏.
解决:
在ata模式下进入系统
打开注册表编辑器
修改 HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Msahci 中 Start 的值为0
重启电脑 进bios 切换到ahci模式
启动系统
进入桌面后会显示有驱动正在安装.
再手动下载安装一下intel的快速存储技术驱动就好了&amp;hellip;</description></item><item><title>mysql表锁定中不支持清空操作?</title><link>https://hitian.info/post/mysql-table-lock/</link><pubDate>Thu, 01 Dec 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/mysql-table-lock/</guid><description>偶然发现这个问题
mysql&amp;gt; lock table test_my write; Query OK, 0 rows affected (0.00 sec) mysql&amp;gt; select * from test_my; Empty set (0.00 sec) mysql&amp;gt; insert into test_my values(null, 1, 1); Query OK, 1 row affected (0.00 sec) mysql&amp;gt; select * from test_my; +—-+——+——–+ | id | pid | enable | +—-+——+——–+ | 1 | 1 | 1 | +—-+——+——–+ 1 row in set (0.00 sec) mysql&amp;gt; truncate table test_my; ERROR 1192 (HY000): Can&amp;#39;t execute the given command because you have active lock ed tables or an active transaction TRUNCATE TABLE was not allowed under LOCK TABLES.</description></item><item><title>thinkpad ubuntu 11.10 暂时禁用触控板</title><link>https://hitian.info/post/thinkpad-ubuntu-disable-touchpad/</link><pubDate>Sun, 27 Nov 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/thinkpad-ubuntu-disable-touchpad/</guid><description>打字的时候经常碰到触控板很郁闷, 在使用usb鼠标的时候可以暂时禁用触控板和小红点
sudo modprobe -r psmouse
重新启用
sudo modprobe -i psmouse</description></item><item><title>解决ie6 恶心的动态gif图片问题</title><link>https://hitian.info/post/ie6-gif-bug/</link><pubDate>Fri, 25 Nov 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/ie6-gif-bug/</guid><description>&lt;p>将改变img标签的src的事件触发写在a标记的onclick里面 在ie6下会导致切换后新的图片无法加载.&lt;/p>
&lt;p>今天又发现了另一个恶心的问题&lt;/p></description></item><item><title>使用类似于奖池方式的抽奖模拟</title><link>https://hitian.info/post/lottery-simulation/</link><pubDate>Wed, 23 Nov 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/lottery-simulation/</guid><description>一般来说要做一个抽奖程序会立即想到用随机数. 但是通常情况下随机数也不是那么的随机, 数量比较大的时候才能体现出比较平均, 数量较小的时候中奖概率的可控性将会很差. 一不小心多被抽中几个麻烦就大了.
&amp;lt;?php class T_prize{ var $item; var $table; /** * 抽奖主程序 外部调用入口 * @param unknown_type $db 数据库链接 * @param unknown_type $id 抽奖类型 */ function prize($db, $id){ global $prize_set; // if(!isset($prize_set[$id])){ return false; } $this-&amp;gt;item = $prize_set[$id]; $table = &amp;#39;my_prize_store_table_&amp;#39; . $id; //抽奖并发较大时可以进行分表, 多生成几个奖池 //$table = &amp;#39;my_prize_store_table_&amp;#39; . $id . &amp;#39;_&amp;#39; . rand(0, 4); $this-&amp;gt;table = $table; //防止多个用户抽到同一个条目, 进行锁表 $db-&amp;gt;query(&amp;#34;lock table &amp;#34; . $table . &amp;#34; write&amp;#34;); $pid = $this-&amp;gt;get_one($db, $id); //奖池中没有奖品时重新初始化奖池 if($pid == &amp;#39;-1&amp;#39;){ $this-&amp;gt;create_pool($db, $id); $pid = $this-&amp;gt;get_one($db, $id); } //释放锁 返回抽奖结果 $db-&amp;gt;query(&amp;#34;unlock table&amp;#34;); return $pid; } /** * 抽奖一次 * @param unknown_type $db * @param unknown_type $id */ function get_one($db, $id){ $table = $this-&amp;gt;table; $sql = &amp;#34;SELECT * FROM ${table} WHERE enable = &amp;#39;1&amp;#39; LIMIT 1&amp;#34;; $row = $db-&amp;gt;fetch($db-&amp;gt;query($sql)); $success = false; $re = array(); if($row){ $id = $row[&amp;#39;id&amp;#39;]; $pid = $row[&amp;#39;pid&amp;#39;]; $update_data = array( &amp;#39;enable&amp;#39; =&amp;gt; 0, ); $db-&amp;gt;update($table, $update_data, &amp;#34;id=&amp;#39;$id&amp;#39;&amp;#34;); $result = $db-&amp;gt;getAffectedRows(); if($result &amp;gt; 0){ $success = true; $re = $row; }else{ my_log(&amp;#39;抽奖池条目状态修改发生错误 id:&amp;#39; .</description></item><item><title>重装系统后恢复开发环境</title><link>https://hitian.info/post/restore-development-environment/</link><pubDate>Tue, 22 Nov 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/restore-development-environment/</guid><description>每次做系统都很愁, 因为有一大堆软件需要重新安装, 尽管尽量都用绿色的还是有一大推需要安装的, 尝试着列个表, 简化一下流程&amp;hellip;
个人文件夹迁移 将个人文件夹中的 我的视频 我的音乐 我的图片 移动到原来非系统盘的位置去 (一直很纳闷为什么这些需要大量占用磁盘空间的东西不一开始就放在非系统盘) 恢复apache和php环境 之前的都装在d盘了 以管理员运行cmd 进入D:\lamp\apache\bin
httpd.exe -k install 将apache安装为系统服务
httpd.exe -k start 启动apache
mysql 一直使用的远程的, 跳过
将备份的host 文件覆盖 顺便调整一下修改的权限
运行环境搞定
安装firefox 然后安装插件 firebug;
firecookie;
web developer;
dns flusher;
advanced cookie manager;
再安装一下chrome 使用google帐号将之前的插件都同步回来
ok 调试环境也搞定
安装 jre ; Dreamweaver ; mysql workbench; eclipse pdt; editplus ok 开发环境搞定</description></item><item><title>ubuntu-server 版本升级</title><link>https://hitian.info/post/ubuntu-server-upgrade/</link><pubDate>Wed, 09 Nov 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/ubuntu-server-upgrade/</guid><description>一直以来虚拟机里测试用的ubuntu server 都是在出新版本后直接重新安装的, 但是现在东西实在太多了, 懒得再重装了, 网上查了一下升级的过程作下记录:
升级之前重要的配置文件最好先备份一下, 对于测试服务器, 我选择直接跳过
修改一下/etc/apt/sources.list 找个快点的源, 不然会很郁闷的. 网易的就不错 mirrors.163.com
开始升级
$sudo apt-get install update-manager-core
显示已经安装了最新版本
接着
$sudo do-release-upgrade
因为我是ssh上去的, 系统会提示如果发生意外可以使用1022端口登录上去
一路 y
可以看到其实已经在get新版本的包了
接下来漫长的半个小时等待..zzzZZ
网速严重不给力啊
安装新的, 有一部分老的会被删除
接着自动重启
看来升级成功了
看来mysql没起来, 其他都是正常的
(完)&amp;hellip;</description></item><item><title>win7 x64 运行x86的zend studio 9.0</title><link>https://hitian.info/post/win7-x64-zend-studio-x86/</link><pubDate>Sat, 05 Nov 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/win7-x64-zend-studio-x86/</guid><description>x64的win8 安装了x64 的jdk 再运行zendstudio时就会出错
解决:
再安装一下x86 的jre
打开 C:\Program Files (x86)\Zend\Zend Studio 9.0.0\ZendStudio.ini
添加 -vm
C:\Program Files (x86)\Java\jre6\bin\javaw.exe
-name Zend Studio -vm C:\Program Files (x86)\Java\jre6\bin\javaw.exe -vmargs</description></item><item><title>gmail 在 ie9中乱版</title><link>https://hitian.info/post/gmail-ie9/</link><pubDate>Sat, 22 Oct 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/gmail-ie9/</guid><description>在ie9 中打开gmail页面全乱 并提示ie使用了兼容性视图.并且给了修复方式:
右键点击右上角的齿轮图标。
选择命令栏。
打开浏览器顶部的工具菜单，然后选择兼容性视图设置。
在“已添加到兼容性视图中的网站”下，选择“google.com”。
点击删除。但是在我的已添加列表中并没有google.com
解决方法很简单, 按&amp;rsquo;F12&amp;rsquo; 打开开发人员工具, 切换一下浏览器模式然后关掉就好了</description></item><item><title>php执行服务器脚本</title><link>https://hitian.info/post/php-exec/</link><pubDate>Thu, 20 Oct 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/php-exec/</guid><description>php执行服务器上的脚本进行一些操作不是什么难事.
exec system passthru 这几个函数都可以调用外部的命令. 只要有权限就完全没有问题.
例如
exec('/home/tian/bin/trytodosomething -h');
命令执行后php会挂起直到命令运行完毕. 有时候脚本运行的时间也许很长, 我们需要让php继续执行及时反馈给用户我们已经开始操作了.
$cmd = &amp;#39;/home/tian/bin/trytodosomething -h &amp;gt; /tmp/null &amp;amp;&amp;#39;; $result = system($cmd); 这样修改之后, php就会继续执行, 不会等待命令执行完这样也存在一个问题, 用户不断的刷新网页可以能造成一些麻烦, 使用文件锁就可以解决这个问题.</description></item><item><title>intel my wifi 无法获取到ip的解决</title><link>https://hitian.info/post/intel-my-wifi/</link><pubDate>Wed, 14 Sep 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/intel-my-wifi/</guid><description>平时都使用脚本来共享wifi给手机
start_wifi.bat&amp;gt;
netsh wlan set hostednetwork mode=allow ssid=TIANap key=21345678 netsh wlan start hostednetwork pause 今天更新驱动时发现了intel的my wifi便试了下, 可以实时显示都有哪些设备使用了.但是有个问题就是其他设备一直不能正常获取到ip地址.
打开my wifi创建的无线网络连接属性, 尝试着将除了internet 协议版本4 之外的其他项全取消了就好了,不知道什么原因导致的.</description></item><item><title>js常用操作</title><link>https://hitian.info/post/js-tools/</link><pubDate>Wed, 24 Aug 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/js-tools/</guid><description>/** * js常用操作类 */ var myTools = window.myTools = { // getElementById g: function(id){ return document.getElementById(id); }, // getElementsByTagName t: function(name){ return document.getElementsByTagName(name); }, writeHTML: function(id, content){ var target = this.g(id); if (target != null) { target.innerHTML = content; } }, //计算字符串长度， 中文算两个字 slen: function(str){ c = 0; for (var i = 0; i &amp;lt; str.length; i++) (str.charCodeAt(i) &amp;gt; 255) ? c += 2 : c++; return c; }, // 还原html HtmlToStr: function(vStr){ vStr = vStr.</description></item><item><title>php注意正则匹配的长度限制</title><link>https://hitian.info/post/php-regex-length-limit/</link><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/php-regex-length-limit/</guid><description>&lt;p>今天要使用正则来批量替换一个抓取页面中的图片地址&lt;/p></description></item><item><title>js本地存储和cookie操作</title><link>https://hitian.info/post/js-localstorage/</link><pubDate>Sun, 21 Aug 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/js-localstorage/</guid><description>/** * tian */ //storage tools; var st = { sset : function(a, b) { storage.set(a, b); }, sget : function(a) { return storage.get(a); }, sdel : function(a) { storage.del(a); }, cset : function(a, b) { var c = [], _para = {}; for ( var d = 0, _len = arguments.length; d &amp;lt; _len; d++) { c[d] = arguments[d]; } ; _para.exps = typeof (c[2]) != &amp;#34;undefined&amp;#34; ? Math.ceil(c[2] / (3600 * 24)) : undefined; _para.</description></item><item><title>简单的mysql表级锁</title><link>https://hitian.info/post/simple-mysql-table-level-locks/</link><pubDate>Tue, 12 Jul 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/simple-mysql-table-level-locks/</guid><description>由于业务需要, 一个表不允许两个及以上用户同时操作.由于是mysql4.1 事务等高级特性就不用想了, 存储引擎统一使用的MyISAM.其实转换成InnoDB 就可以使用行级锁了, 但是由于是线上正在使用的数据库, 数据量比较大,转换怕出现意外. 要实现的功能又是在后台使用. 所以就直接使用表级锁完全可以了.在mysql中对表加锁和解锁其实挺简单的
LOCK TABLE table_name; UNLOCK TABLE; demo
&amp;lt;?php $db = new Mysql(); $db-&amp;gt;open(); $db-&amp;gt;query(&amp;#34;lock table &amp;#34; . $table); $sql = &amp;#34;SELECT * FROM ${table} WHERE gid=&amp;#39;${gid}&amp;#39; AND sid IS NULL LIMIT 1&amp;#34;; $row = $db-&amp;gt;fetch($db-&amp;gt;query($sql)); $success = false; $re = array(); if($row){ $id = $row[&amp;#39;id&amp;#39;]; $update_data = array( &amp;#39;udate&amp;#39; =&amp;gt; date(&amp;#39;Y-m-d H:i:s&amp;#39;), &amp;#39;tuid&amp;#39; =&amp;gt; $uid, &amp;#39;operator&amp;#39; =&amp;gt; $_COOKIE[&amp;#39;admin_name&amp;#39;], &amp;#39;sid&amp;#39; =&amp;gt; $sid, ); $db-&amp;gt;update($this-&amp;gt;table, $update_data, &amp;#34;id=&amp;#39;$id&amp;#39;&amp;#34;); $result = $db-&amp;gt;getAffectedRows(); if($result &amp;gt; 0){ $success = true; $re = $row; }else{ $msg = &amp;#39;发生错误: 物品库存修改失败!</description></item><item><title>Hello world!</title><link>https://hitian.info/post/hello-world/</link><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid>https://hitian.info/post/hello-world/</guid><description>从今天起就在这里安家了。以前也在其它地方开过博客，但是都没过多久就半途而废了，希望这次可以坚持下去。
tian2011.07.08于地铁四号线</description></item></channel></rss>